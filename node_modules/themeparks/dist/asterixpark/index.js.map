{"version":3,"sources":["../../lib/asterixpark/index.js"],"names":["Park","require","Moment","rawRideData","__dirname","rideData","i","ride","code","s_apiBase","Symbol","s_apiVersion","s_appVersion","reTime","reClosingTime","AsterixPark","options","name","timezone","latitude","longitude","api_base","api_version","app_version","Promise","resolve","reject","HTTP","url","data","then","waittimes","GetOpeningTimes","parkTimes","allRidesClosed","todaysOpeningHour","now","parkTime","type","isBetween","openingTime","closingTime","latency","ridetime","rideObject","GetRideObject","id","attractionid","title","WaitTime","parseInt","closing_time","resultRe","exec","closingMoment","tz","Timezone","hours","minutes","seconds","Schedule","SetDate","bind","openingHours","agenda","date","jour","firstResult","horaire","clone","endOf","specialHours","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// include core Park class\r\nvar Park = require(\"../park\");\r\n\r\nvar Moment = require(\"moment-timezone\");\r\n\r\n// load ride name data\r\nvar rawRideData = require(__dirname + \"/AsterixData.js\");\r\nvar rideData = {};\r\nfor (var i = 0, ride; ride = rawRideData[i++];) {\r\n    rideData[ride.code] = ride;\r\n}\r\n\r\nvar s_apiBase = Symbol();\r\nvar s_apiVersion = Symbol();\r\nvar s_appVersion = Symbol();\r\n\r\nvar reTime = /(\\d+)h - (\\d+|Minuit)(?:h?)/ig;\r\nvar reClosingTime = /(\\d+)h(\\d+)/;\r\n\r\n/**\r\n * Implements the Asterix Park API\r\n * @class\r\n * @extends Park\r\n */\r\nclass AsterixPark extends Park {\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"Parc-Asterix\";\r\n        options.timezone = options.timezone || \"Europe/Paris\";\r\n        options.latitude = options.latitude || 49.136041;\r\n        options.longitude = options.longitude || 2.572768;\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // API Options\r\n        this[s_apiBase] = options.api_base || \"https://www.parcasterix.fr/webservices/\";\r\n        this[s_apiVersion] = options.api_version || \"1\";\r\n        this[s_appVersion] = options.app_version || \"320\";\r\n    }\r\n\r\n    // this park supports ride schedules\r\n    get SupportsRideSchedules() {\r\n        return true;\r\n    }\r\n\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.HTTP({\r\n                url: `${this[s_apiBase]}api/attentix.json`,\r\n                data: {\r\n                    \"device\": \"android\",\r\n                    \"version\": this[s_appVersion],\r\n                    \"lang\": \"fr\",\r\n                    \"apiversion\": this[s_apiVersion]\r\n                }\r\n            }).then(function(waittimes) {\r\n                // get opening hours and mark every ride as closed if the park is just actually closed\r\n                this.GetOpeningTimes().then(function(parkTimes) {\r\n                    var allRidesClosed = true;\r\n                    var todaysOpeningHour;\r\n\r\n                    var now = Moment();\r\n                    for (var i = 0, parkTime; parkTime = parkTimes[i++];) {\r\n                        if (parkTime.type == \"Operating\" && now.isBetween(parkTime.openingTime, parkTime.closingTime)) {\r\n                            allRidesClosed = false;\r\n                            // remember the park's opening hour so we can fill in ride opening times later\r\n                            todaysOpeningHour = parkTime.openingTime;\r\n                        }\r\n                    }\r\n\r\n                    if (!waittimes.latency || !waittimes.latency.latency) return reject(\"API didn't return expected format\");\r\n\r\n                    var ridetime;\r\n                    for (i = 0, ridetime; ridetime = waittimes.latency.latency[i++];) {\r\n                        var rideObject = this.GetRideObject({\r\n                            id: ridetime.attractionid,\r\n                            // ride name comes from hard-coded AsterixData.json file\r\n                            name: (rideData[ridetime.attractionid] && rideData[ridetime.attractionid].title) ? rideData[ridetime.attractionid].title : \"??\",\r\n                        });\r\n\r\n                        // if park is closed, just mark all rides as closed\r\n                        if (allRidesClosed) {\r\n                            rideObject = -1;\r\n                        } else {\r\n                            //FYI, latency = \"A L'ARRET\" / \"INDISPONIBLE\" / \"FERME\" / \"X\" (mn)\r\n                            if (ridetime.latency === \"A L'ARRET\" || ridetime.latency === \"INDISPONIBLE\") {\r\n                                rideObject.WaitTime = -2;\r\n                            } else if (ridetime.latency === \"FERME\") {\r\n                                rideObject.WaitTime = -1;\r\n                            } else {\r\n                                rideObject.WaitTime = parseInt(ridetime.latency, 10);\r\n\r\n                                if (ridetime.closing_time) {\r\n                                    var resultRe = reClosingTime.exec(ridetime.closing_time);\r\n                                    if (resultRe) {\r\n                                        var closingMoment = Moment.tz(this.Timezone).hours(parseInt(resultRe[1])).minutes(parseInt(resultRe[2])).seconds(0);\r\n                                        rideObject.Schedule.SetDate({\r\n                                            openingTime: todaysOpeningHour,\r\n                                            closingTime: closingMoment,\r\n                                            type: \"Operating\"\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    resolve();\r\n                }.bind(this), reject);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    FetchOpeningTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.HTTP({\r\n                url: `${this[s_apiBase]}03/fr`,\r\n                data: {\r\n                    \"device\": \"android\",\r\n                    \"version\": this[s_appVersion],\r\n                    \"lang\": \"fr\",\r\n                    \"apiversion\": this[s_apiVersion]\r\n                }\r\n            }).then(function(openingHours) {\r\n                if (!openingHours.agenda) return reject(\"API didn't return expected opening hours data\");\r\n\r\n                for (var i = 0, agenda; agenda = openingHours.agenda[i++];) {\r\n                    var date = Moment.tz(agenda.jour, \"DD-MM-YYYY\", this.Timezone);\r\n\r\n                    if (agenda.type === \"D\") {\r\n                        // park is closed\r\n                        this.Schedule.SetDate({\r\n                            date: date,\r\n                            type: \"Closed\"\r\n                        });\r\n                    } else {\r\n                        var resultRe;\r\n                        var firstResult = true;\r\n\r\n                        while ((resultRe = reTime.exec(agenda.horaire)) !== null) {\r\n                            // - Normal time\r\n                            this.Schedule.SetDate({\r\n                                date: date,\r\n                                openingTime: date.clone().hours(parseInt(resultRe[1])).minutes(0).seconds(0),\r\n                                closingTime: (resultRe[2] === \"Minuit\") ? date.endOf(\"day\") : date.clone().hours(parseInt(resultRe[2])).minutes(0).seconds(0),\r\n                                // can't send type for \"special hours\"\r\n                                type: !firstResult ? null : \"Operating\",\r\n                                // first result is normal hours, any further dates are special hours\r\n                                specialHours: !firstResult\r\n                            });\r\n\r\n                            // mark that we've parsed one set of opening hours, assume any others are special\r\n                            firstResult = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                resolve();\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n}\r\n\r\n// export the class\r\nmodule.exports = AsterixPark;"]}