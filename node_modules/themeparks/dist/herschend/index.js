"use strict";

// base park objects

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Park = require("../park.js");

// Moment date/time library
var Moment = require("moment-timezone");

// include our Promise library
var Promise = require("../promise");

// API settings
var base_url = "http://pulse.hfecorp.com/api/waitTimes/";

var s_parkID = Symbol();
var s_calendarURL = Symbol();
var s_parkIDs = Symbol();

/**
 * Implements the Walt Disney World API framework. All Disney parks use this one API.
 * @class
 * @extends Park
 */

var HerschendBase = function (_Park) {
    _inherits(HerschendBase, _Park);

    /**
     * Create new HerschendBase Object.
     * This object should not be called directly, but rather extended for each of the individual Herschend Parks
     * @param {Object} options
     * @param {String} options.park_id Herschend API park ID
     * @param {String} options.calendar_url Herschend calendar base URL
     * @param {String} options.parkids Herschend calendar "parkids" value
     */
    function HerschendBase() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, HerschendBase);

        // check we have our park_id
        var _this = _possibleConstructorReturn(this, (HerschendBase.__proto__ || Object.getPrototypeOf(HerschendBase)).call(this, options));
        // inherit from base class


        if (!options.park_id) {
            throw new Error("No park_id supplied for Herschend park");
        }
        _this[s_parkID] = options.park_id;

        if (!options.calendar_url) {
            throw new Error("No calendar URL supplied for Herschend park");
        }
        _this[s_calendarURL] = options.calendar_url;

        if (!options.parkids) {
            throw new Error("No parkids supplied for Herschend park");
        }
        _this[s_parkIDs] = options.parkids;
        return _this;
    }

    /**
     * Fetch this Herschend Park's waiting times
     * @returns {Promise}
     */


    _createClass(HerschendBase, [{
        key: "FetchWaitTimes",
        value: function FetchWaitTimes() {
            return new Promise(function (resolve, reject) {
                this.HTTP({
                    url: base_url + this[s_parkID]
                }).then(function (body) {
                    var _this2 = this;

                    body.forEach(function (ride) {
                        var rideObject = _this2.GetRideObject({
                            id: ride.rideId,
                            name: ride.rideName
                        });

                        // Assume that all "UNKNOWN" times are closed rides.
                        if (ride.operationStatus.includes("CLOSED") || ride.operationStatus.includes("UNKNOWN")) {
                            rideObject.WaitTime = -1;
                        }

                        // Wait time is not defined if text says "Under x minutes" - we'll set the ride time to x
                        else if (ride.waitTimeDisplay.includes("UNDER")) {
                                rideObject.WaitTime = parseInt(ride.waitTimeDisplay.split(" ")[1]);
                            } else {
                                rideObject.WaitTime = parseInt(ride.waitTime);
                            }
                    });

                    return resolve();
                }.bind(this), reject);
            }.bind(this));
        }

        /**
         * Fetch this Herschend Park's opening times
         * @returns {Promise}
         */

    }, {
        key: "FetchOpeningTimes",
        value: function FetchOpeningTimes() {
            return new Promise(function (resolve, reject) {
                // get today's date and add on a month to get a decent range of dates
                var rangeStart = Moment.tz(this.Timezone).format("YYYY-MM-DD");

                this.HTTP({
                    url: "https://" + this[s_calendarURL] + "/sitecore/api/hfe/hfedata/dailyschedulebytime",
                    data: {
                        "date": rangeStart,
                        "days": 30,
                        "parkids": this[s_parkIDs]
                    },
                    headers: {
                        "Authorization": "Basic ZXh0cmFuZXRcYXBpdXNlcjpKdzdvZGh3RkhwSzRKZw=="
                    }
                }).then(function (scheduleData) {
                    // parse each schedule entry
                    for (var i = 0; i < scheduleData.length; i++) {
                        var day = scheduleData[i];

                        if (day.schedule.parkHours[0].from) {
                            this.Schedule.SetDate({
                                date: Moment.tz(day.date, "YYYY-MM-DD", this.Timezone),
                                openingTime: Moment.tz(day.schedule.parkHours[0].from, "YYYY-MM-DDTHH:mm:ss", this.Timezone),
                                closingTime: Moment.tz(day.schedule.parkHours[0].to, "YYYY-MM-DDTHH:mm:ss", this.Timezone)
                            });
                        } else {
                            this.Schedule.SetDate({
                                date: Moment.tz(day.date, "YYYY-MM-DD", this.Timezone),
                                type: "Closed"
                            });
                        }
                    }

                    resolve();
                }.bind(this), reject);
            }.bind(this));
        }
    }]);

    return HerschendBase;
}(Park);

// export just the Base Herschend Park class


module.exports = HerschendBase;
//# sourceMappingURL=index.js.map