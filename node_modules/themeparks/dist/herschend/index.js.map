{"version":3,"sources":["../../lib/herschend/index.js"],"names":["Park","require","Moment","Promise","base_url","s_parkID","Symbol","s_calendarURL","s_parkIDs","HerschendBase","options","park_id","Error","calendar_url","parkids","resolve","reject","HTTP","url","then","body","forEach","ride","rideObject","GetRideObject","id","rideId","name","rideName","operationStatus","includes","WaitTime","waitTimeDisplay","parseInt","split","waitTime","bind","rangeStart","tz","Timezone","format","data","headers","scheduleData","i","length","day","schedule","parkHours","from","Schedule","SetDate","date","openingTime","closingTime","to","type","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\n// base park objects\r\nvar Park = require(\"../park.js\");\r\n\r\n// Moment date/time library\r\nvar Moment = require(\"moment-timezone\");\r\n\r\n// include our Promise library\r\nvar Promise = require(\"../promise\");\r\n\r\n// API settings\r\nvar base_url = \"http://pulse.hfecorp.com/api/waitTimes/\";\r\n\r\nvar s_parkID = Symbol();\r\nvar s_calendarURL = Symbol();\r\nvar s_parkIDs = Symbol();\r\n\r\n/**\r\n * Implements the Walt Disney World API framework. All Disney parks use this one API.\r\n * @class\r\n * @extends Park\r\n */\r\nclass HerschendBase extends Park {\r\n    /**\r\n     * Create new HerschendBase Object.\r\n     * This object should not be called directly, but rather extended for each of the individual Herschend Parks\r\n     * @param {Object} options\r\n     * @param {String} options.park_id Herschend API park ID\r\n     * @param {String} options.calendar_url Herschend calendar base URL\r\n     * @param {String} options.parkids Herschend calendar \"parkids\" value\r\n     */\r\n    constructor(options = {}) {\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // check we have our park_id\r\n        if (!options.park_id) {\r\n            throw new Error(\"No park_id supplied for Herschend park\");\r\n        }\r\n        this[s_parkID] = options.park_id;\r\n\r\n        if (!options.calendar_url) {\r\n            throw new Error(\"No calendar URL supplied for Herschend park\");\r\n        }\r\n        this[s_calendarURL] = options.calendar_url;\r\n\r\n        if (!options.parkids) {\r\n            throw new Error(\"No parkids supplied for Herschend park\");\r\n        }\r\n        this[s_parkIDs] = options.parkids;\r\n    }\r\n\r\n    /**\r\n     * Fetch this Herschend Park's waiting times\r\n     * @returns {Promise}\r\n     */\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.HTTP({\r\n                url: base_url + this[s_parkID]\r\n            }).then(function(body) {\r\n                body.forEach((ride) => {\r\n                    var rideObject = this.GetRideObject({\r\n                        id: ride.rideId,\r\n                        name: ride.rideName\r\n                    });\r\n\r\n                    // Assume that all \"UNKNOWN\" times are closed rides.\r\n                    if (ride.operationStatus.includes(\"CLOSED\") || ride.operationStatus.includes(\"UNKNOWN\")) {\r\n                        rideObject.WaitTime = -1;\r\n                    }\r\n\r\n                    // Wait time is not defined if text says \"Under x minutes\" - we'll set the ride time to x\r\n                    else if (ride.waitTimeDisplay.includes(\"UNDER\")) {\r\n                        rideObject.WaitTime = parseInt(ride.waitTimeDisplay.split(\" \")[1]);\r\n                    } else {\r\n                        rideObject.WaitTime = parseInt(ride.waitTime);\r\n                    }\r\n                });\r\n\r\n                return resolve();\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Fetch this Herschend Park's opening times\r\n     * @returns {Promise}\r\n     */\r\n    FetchOpeningTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            // get today's date and add on a month to get a decent range of dates\r\n            var rangeStart = Moment.tz(this.Timezone).format(\"YYYY-MM-DD\");\r\n\r\n            this.HTTP({\r\n                url: \"https://\" + this[s_calendarURL] + \"/sitecore/api/hfe/hfedata/dailyschedulebytime\",\r\n                data: {\r\n                    \"date\": rangeStart,\r\n                    \"days\": 30,\r\n                    \"parkids\": this[s_parkIDs]\r\n                },\r\n                headers: {\r\n                    \"Authorization\": \"Basic ZXh0cmFuZXRcYXBpdXNlcjpKdzdvZGh3RkhwSzRKZw==\"\r\n                }\r\n            }).then(function(scheduleData) {\r\n                // parse each schedule entry\r\n                for (var i = 0; i < scheduleData.length; i++) {\r\n                    var day = scheduleData[i];\r\n\r\n                    if (day.schedule.parkHours[0].from) {\r\n                        this.Schedule.SetDate({\r\n                            date: Moment.tz(day.date, \"YYYY-MM-DD\", this.Timezone),\r\n                            openingTime: Moment.tz(day.schedule.parkHours[0].from, \"YYYY-MM-DDTHH:mm:ss\", this.Timezone),\r\n                            closingTime: Moment.tz(day.schedule.parkHours[0].to, \"YYYY-MM-DDTHH:mm:ss\", this.Timezone)\r\n                        });\r\n                    } else {\r\n                        this.Schedule.SetDate({\r\n                            date: Moment.tz(day.date, \"YYYY-MM-DD\", this.Timezone),\r\n                            type: \"Closed\"\r\n                        });\r\n                    }\r\n                }\r\n\r\n                resolve();\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n}\r\n\r\n// export just the Base Herschend Park class\r\nmodule.exports = HerschendBase;"]}