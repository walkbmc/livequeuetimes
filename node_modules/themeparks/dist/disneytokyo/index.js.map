{"version":3,"sources":["../../lib/disneytokyo/index.js"],"names":["random_useragent","require","Moment","Park","s_apiKey","Symbol","s_apiAuth","s_apiOS","s_apiVersion","s_apiBase","s_webUserAgent","s_parkID","DisneyTokyoPark","options","name","timezone","api_key","api_auth","api_os","api_version","api_base","park_id","undefined","Error","getRandom","ua","osName","connection","FetchRideData","then","rides","FetchWaitTimesJSON","data","i","attractions","length","ride","id","standbyTimeDisplayType","type","rideObject","GetRideObject","FastPass","fastpass","operatingStatus","WaitTime","facilityStatus","standbyTime","Promise","resolve","HTTP","url","method","headers","GetAPIHeaders","Cache","Wrap","GetEnglishNames","englishNames","body","reject","rideData","attr","parkType","toLowerCase","englishData","Number","facilityCode","nameKana","attractionType","retryDelay","regexGetRideNames","match","exec","area","matches","compId","push","today","tz","Timezone","format","FetchCalendarJSON","day","Schedule","SetDate","date","openingTime","openTime","closingTime","closeTime","closedDay","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\nconst random_useragent = require(\"random-useragent\");\r\n\r\nconst Moment = require(\"moment-timezone\");\r\n\r\nconst Park = require(\"../park\");\r\n\r\nconst s_apiKey = Symbol();\r\nconst s_apiAuth = Symbol();\r\nconst s_apiOS = Symbol();\r\nconst s_apiVersion = Symbol();\r\nconst s_apiBase = Symbol();\r\nconst s_webUserAgent = Symbol();\r\nconst s_parkID = Symbol();\r\n\r\n/**\r\n * Implements the Tokyo Disneyland API framework.\r\n * @class\r\n * @extends Park\r\n */\r\nclass DisneyTokyoPark extends Park {\r\n    /**\r\n     * Create new DisneyTokyoPark Object.\r\n     * This object should not be called directly, but rather extended for each of the individual Tokyo Disneyland parks\r\n     * @param {Object} options\r\n     * @param {String} options.park_id Tokyo Disneyland API park ID\r\n     */\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"Tokyo Disneyland Park\";\r\n        options.timezone = options.timezone || \"Asia/Tokyo\";\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        this[s_apiKey] = options.api_key || \"818982cd6a62e7927700a4fbabcd4534a4657a422711a83c725433839b172371\";\r\n        this[s_apiAuth] = options.api_auth || \"MmYyZDYzehoVwD52FWYyDvo22aGvetu6uaGGKdN6FILO9lp2XS17DF//BA+Gake8oJ0GKlGnJDWu/boVa32d7PfCeTqCJA==\";\r\n        this[s_apiOS] = options.api_os || \"Android 8.1.0\";\r\n        this[s_apiVersion] = options.api_version || \"1.0.3\";\r\n        this[s_apiBase] = options.api_base || \"https://api-portal.tokyodisneyresort.jp\";\r\n\r\n        if (options.park_id === undefined) throw new Error(\"No Park ID passed to DisneyTokyoPark object constructor\");\r\n        this[s_parkID] = options.park_id;\r\n\r\n        this[s_webUserAgent] = random_useragent.getRandom((ua) => ua.osName == \"Android\");\r\n    }\r\n\r\n    // override Fastpass Getter to declare support for Fastpass\r\n    get FastPass() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Refresh/Fetch new Wait Times for this Tokyo Disney Resort park\r\n     * @returns {Promise}\r\n     */\r\n    GetAPIHeaders() {\r\n        return {\r\n            \"x-api-key\": this[s_apiKey],\r\n            \"X-PORTAL-LANGUAGE\": \"ja\",\r\n            \"X-PORTAL-OS-VERSION\": this[s_apiOS],\r\n            \"X-PORTAL-APP-VERSION\": this[s_apiVersion],\r\n            \"X-PORTAL-AUTH\": this[s_apiAuth],\r\n            connection: \"keep-alive\"\r\n        };\r\n    }\r\n\r\n    FetchWaitTimes() {\r\n        // first get our ride names etc.\r\n        return this.FetchRideData().then((rides) => {\r\n            return this.FetchWaitTimesJSON().then((data) => {\r\n                for (let i = 0; i < data.attractions.length; i++) {\r\n                    const ride = data.attractions[i];\r\n                    // skip any rides we don't recognise\r\n                    if (!rides[ride.id]) continue;\r\n                    // skip rides with no wait time service\r\n                    if (ride.standbyTimeDisplayType == \"FIXED\") continue;\r\n                    // skip anything not type 1 or 2 (rides and shows)\r\n                    if (rides[ride.id].type >= 3) continue;\r\n\r\n                    let rideObject = this.GetRideObject({\r\n                        id: ride.id,\r\n                        name: rides[ride.id].name\r\n                    });\r\n\r\n                    rideObject.FastPass = rides[ride.id].fastpass;\r\n\r\n                    if (ride.operatingStatus == \"CLOSE_NOTICE\") {\r\n                        // ride is temporarily closed\r\n                        rideObject.WaitTime = -2;\r\n                    } else if (ride.facilityStatus == \"CANCEL\") {\r\n                        // ride is closed for the day\r\n                        rideObject.WaitTime = -1;\r\n                    } else if (ride.operatingStatus == \"OPEN\") {\r\n                        rideObject.WaitTime = (ride.standbyTime !== undefined && ride.standbyTime >= 0) ? ride.standbyTime : 0;\r\n                    } else {\r\n                        rideObject.WaitTime = -1;\r\n                    }\r\n                }\r\n\r\n                return Promise.resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    FetchWaitTimesJSON() {\r\n        return this.HTTP({\r\n            url: `${this[s_apiBase]}/rest/v1/facilities/conditions`,\r\n            method: \"GET\",\r\n            headers: this.GetAPIHeaders(),\r\n        });\r\n    }\r\n\r\n    FetchRideData() {\r\n        return this.Cache.Wrap(\"ridedata\", () => {\r\n            // first get our English ride names\r\n            return this.GetEnglishNames().then((englishNames) => {\r\n                // fetch ride data from App API\r\n                return this.HTTP({\r\n                    url: `${this[s_apiBase]}/rest/v1/facilities`,\r\n                    method: \"GET\",\r\n                    headers: this.GetAPIHeaders()\r\n                }).then((body) => {\r\n                    if (!body) {\r\n                        return Promise.reject(\"Failed to find entries in ride data response\");\r\n                    }\r\n\r\n                    const rideData = {};\r\n\r\n                    for (let i = 0; i < body.attractions.length; i++) {\r\n                        const attr = body.attractions[i];\r\n\r\n                        // skip attractions from the other park\r\n                        if (attr.parkType.toLowerCase() != this[s_parkID]) continue;\r\n\r\n                        const englishData = englishNames[Number(attr.facilityCode)];\r\n\r\n                        rideData[attr.id] = {\r\n                            name: englishData && englishData.name !== undefined ? englishData.name : attr.nameKana,\r\n                            fastpass: !!attr.fastpass,\r\n                            type: attr.attractionType.id,\r\n                            facilityCode: Number(attr.facilityCode),\r\n                        };\r\n                    }\r\n\r\n                    return Promise.resolve(rideData);\r\n                });\r\n            });\r\n        }, 86400);\r\n    }\r\n\r\n    GetEnglishNames() {\r\n        return this.Cache.Wrap(\"ridenames\", () => {\r\n            // fetch ride names\r\n            return this.HTTP({\r\n                url: `https://www.tokyodisneyresort.jp/en/${this[s_parkID]}/attraction.html`,\r\n                headers: {\r\n                    \"Referer\": `https://www.tokyodisneyresort.jp/en/${this[s_parkID]}/attraction.html`,\r\n                    connection: \"keep-alive\",\r\n                    \"User-Agent\": this[s_webUserAgent]\r\n                },\r\n                retryDelay: 1000 * 10\r\n            }).then((body) => {\r\n                if (!body) {\r\n                    return Promise.reject(\"Failed to find entries in English ride names data response\");\r\n                }\r\n\r\n                const regexGetRideNames = /e\">([^<]+)<\\/p>[\\s\\n]*<a href=\"\\/en\\/td[sl]\\/attraction\\/detail\\/([0-9]+)\\/\">[\\s\\n]*<div class=\"headingArea\">[\\s\\n]*<div class=\"headingAreaInner\">[\\s\\n]*<h3 class=\"heading3\">([^<]+)<\\/h3>/g;\r\n\r\n                let match;\r\n                var rideData = {};\r\n                while (match = regexGetRideNames.exec(body)) {\r\n                    rideData[Number(match[2])] = {\r\n                        name: match[3],\r\n                        area: match[1],\r\n                    };\r\n                }\r\n\r\n                // add area name to any duplicate names\r\n                for (let id in rideData) {\r\n                    const matches = [];\r\n                    for (let compId in rideData) {\r\n                        if (rideData[id].name == rideData[compId].name) {\r\n                            matches.push(compId);\r\n                        }\r\n                    }\r\n\r\n                    if (matches.length > 1) {\r\n                        for (let i = 0; i < matches.length; i++) {\r\n                            rideData[matches[i]].name = `${rideData[matches[i]].area} ${rideData[matches[i]].name}`;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // missing facility 245 from scrape?\r\n                if (rideData[244] && !rideData[245]) rideData[245] = rideData[244];\r\n\r\n                return Promise.resolve(rideData);\r\n            });\r\n        }, 86400);\r\n    }\r\n\r\n    FetchCalendarJSON() {\r\n        const today = Moment().tz(this.Timezone).format(\"YYYY-MM-DD\");\r\n\r\n        return this.HTTP({\r\n            url: `${this[s_apiBase]}/rest/v1/parks/calendars?since=${today}`,\r\n            method: \"GET\",\r\n            headers: this.GetAPIHeaders(),\r\n        });\r\n    }\r\n\r\n    FetchOpeningTimes() {\r\n        return this.FetchCalendarJSON().then((data) => {\r\n            for (let i = 0, day; day = data[i++];) {\r\n                // skip times for the wrong park\r\n                if (day.parkType.toLowerCase() != this[s_parkID]) continue;\r\n\r\n                this.Schedule.SetDate({\r\n                    date: Moment.tz(day.date, \"YYYY-MM-DD\", this.Timezone),\r\n                    openingTime: Moment.tz(`${day.date} ${day.openTime}`, \"YYYY-MM-DD HH:mm\", this.Timezone),\r\n                    closingTime: Moment.tz(`${day.date} ${day.closeTime}`, \"YYYY-MM-DD HH:mm\", this.Timezone),\r\n                    type: day.closedDay ? \"Closed\" : \"Operating\",\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = DisneyTokyoPark;"]}