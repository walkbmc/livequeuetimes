{"version":3,"sources":["../../lib/disneytokyo/index.js"],"names":["random_useragent","require","Moment","Park","s_apiKey","Symbol","s_apiAuth","s_apiOS","s_apiVersion","s_apiBase","s_webUserAgent","s_parkID","s_deviceID","DisneyTokyoPark","options","name","timezone","useragent","api_key","api_auth","api_os","api_version","api_base","park_id","undefined","Error","getRandom","ua","osName","headers","connection","Depth","OriginalVersion","TestVersion","Promise","reject","HTTP","url","method","GetAPIHeaders","then","resp","latest","split","map","x","idx","Number","join","Log","resolve","Cache","Wrap","data","deviceId","CheckLatest","FetchRideData","rides","FetchWaitTimesJSON","i","attractions","length","ride","id","standbyTimeDisplayType","type","rideObject","GetRideObject","FastPass","fastpass","operatingStatus","WaitTime","facilityStatus","standbyTime","FetchDeviceID","GetEnglishNames","englishNames","body","rideData","attr","parkType","toLowerCase","englishData","facilityCode","nameKana","attractionType","retryDelay","regexGetRideNames","match","exec","area","matches","compId","push","today","tz","Timezone","format","FetchCalendarJSON","day","Schedule","SetDate","date","openingTime","openTime","closingTime","closeTime","closedDay","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\nconst random_useragent = require(\"random-useragent\");\r\n\r\nconst Moment = require(\"moment-timezone\");\r\n\r\nconst Park = require(\"../park\");\r\n\r\nconst s_apiKey = Symbol();\r\nconst s_apiAuth = Symbol();\r\nconst s_apiOS = Symbol();\r\nconst s_apiVersion = Symbol();\r\nconst s_apiBase = Symbol();\r\nconst s_webUserAgent = Symbol();\r\nconst s_parkID = Symbol();\r\nconst s_deviceID = Symbol();\r\n\r\n/**\r\n * Implements the Tokyo Disneyland API framework.\r\n * @class\r\n * @extends Park\r\n */\r\nclass DisneyTokyoPark extends Park {\r\n    /**\r\n     * Create new DisneyTokyoPark Object.\r\n     * This object should not be called directly, but rather extended for each of the individual Tokyo Disneyland parks\r\n     * @param {Object} options\r\n     * @param {String} options.park_id Tokyo Disneyland API park ID\r\n     */\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"Tokyo Disneyland Park\";\r\n        options.timezone = options.timezone || \"Asia/Tokyo\";\r\n\r\n        options.useragent = options.useragent || \"TokyoDisneyResortApp/1.0.8 Android/8.1.0\";\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        this[s_apiKey] = options.api_key || \"818982cd6a62e7927700a4fbabcd4534a4657a422711a83c725433839b172371\";\r\n        this[s_apiAuth] = options.api_auth || \"MmYyZDYzehoVwD52FWYyDvo22aGvetu6uaGGKdN6FILO9lp2XS17DF//BA+Gake8oJ0GKlGnJDWu/boVa32d7PfCeTqCJA==\";\r\n        this[s_apiOS] = options.api_os || \"Android 8.1.0\";\r\n        this[s_apiVersion] = options.api_version || \"1.0.11\";\r\n        this[s_apiBase] = options.api_base || \"https://api-portal.tokyodisneyresort.jp\";\r\n\r\n        if (options.park_id === undefined) throw new Error(\"No Park ID passed to DisneyTokyoPark object constructor\");\r\n        this[s_parkID] = options.park_id;\r\n\r\n        this[s_webUserAgent] = random_useragent.getRandom((ua) => ua.osName == \"Android\");\r\n    }\r\n\r\n    // override Fastpass Getter to declare support for Fastpass\r\n    get FastPass() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Refresh/Fetch new Wait Times for this Tokyo Disney Resort park\r\n     * @returns {Promise}\r\n     */\r\n    GetAPIHeaders() {\r\n        const headers = {\r\n            \"x-api-key\": this[s_apiKey],\r\n            \"X-PORTAL-LANGUAGE\": \"ja\",\r\n            \"X-PORTAL-OS-VERSION\": this[s_apiOS],\r\n            \"X-PORTAL-APP-VERSION\": this[s_apiVersion],\r\n            \"X-PORTAL-AUTH\": this[s_apiAuth],\r\n            \"X-PORTAL-DEVICE-NAME\": \"shamu\",\r\n            connection: \"keep-alive\",\r\n            \"Accept-Encoding\": \"gzip\",\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        };\r\n\r\n        if (this[s_deviceID]) {\r\n            headers[\"X-PORTAL-DEVICE-ID\"] = this[s_deviceID];\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    CheckLatest() {\r\n        let Depth = 3;\r\n\r\n        const OriginalVersion = this[s_apiVersion];\r\n\r\n        const TestVersion = () => {\r\n            if (Depth <= 0) {\r\n                return Promise.reject(new Error(`TDR API is out-of-date (failed to use version ${OriginalVersion}). Please update the library.`));\r\n            }\r\n\r\n            return this.HTTP({\r\n                url: `${this[s_apiBase]}/rest/v1/applications/versions`,\r\n                method: \"GET\",\r\n                headers: this.GetAPIHeaders(),\r\n            }).then((resp) => {\r\n                if (!resp || !resp.latest) {\r\n                    this[s_apiVersion] = this[s_apiVersion].split(\".\").map((x, idx) => idx == 2 ? \"\" + (Number(x) + 1) : x).join(\".\");\r\n                    this.Log(`Bumping version from ${OriginalVersion} to ${this[s_apiVersion]}`);\r\n                    Depth--;\r\n\r\n                    return TestVersion();\r\n                }\r\n\r\n                return Promise.resolve();\r\n            });\r\n        };\r\n\r\n        return TestVersion();\r\n    }\r\n\r\n    FetchDeviceID() {\r\n        if (this[s_deviceID]) return Promise.resolve(this[s_deviceID]);\r\n\r\n        return this.Cache.Wrap(\"tdrDeviceID\", () => {\r\n            return this.HTTP({\r\n                url: `${this[s_apiBase]}/rest/v1/devices`,\r\n                method: \"POST\",\r\n                headers: this.GetAPIHeaders(),\r\n            }).then((data) => {\r\n                if (data && data.deviceId) {\r\n                    this.Log(`Fetched device ID for TDR: ${data.deviceId}`);\r\n\r\n                    this[s_deviceID] = data.deviceId;\r\n\r\n                    return this.CheckLatest().then(() => {\r\n                        return Promise.resolve(data.deviceId);\r\n                    });\r\n                }\r\n\r\n                return Promise.reject(new Error(`Unable to fetch device ID: ${data}`));\r\n            });\r\n        }, 60 * 60 * 24 * 90);\r\n    }\r\n\r\n    FetchWaitTimes() {\r\n        // first get our ride names etc.\r\n        return this.FetchRideData().then((rides) => {\r\n            return this.FetchWaitTimesJSON().then((data) => {\r\n                for (let i = 0; i < data.attractions.length; i++) {\r\n                    const ride = data.attractions[i];\r\n                    // skip any rides we don't recognise\r\n                    if (!rides[ride.id]) continue;\r\n                    // skip rides with no wait time service\r\n                    if (ride.standbyTimeDisplayType == \"FIXED\") continue;\r\n                    // skip anything not type 1 or 2 (rides and shows)\r\n                    if (rides[ride.id].type >= 3) continue;\r\n\r\n                    let rideObject = this.GetRideObject({\r\n                        id: ride.id,\r\n                        name: rides[ride.id].name\r\n                    });\r\n\r\n                    rideObject.FastPass = rides[ride.id].fastpass;\r\n\r\n                    if (ride.operatingStatus == \"CLOSE_NOTICE\") {\r\n                        // ride is temporarily closed\r\n                        rideObject.WaitTime = -2;\r\n                    } else if (ride.facilityStatus == \"CANCEL\") {\r\n                        // ride is closed for the day\r\n                        rideObject.WaitTime = -1;\r\n                    } else if (ride.operatingStatus == \"OPEN\") {\r\n                        rideObject.WaitTime = (ride.standbyTime !== undefined && ride.standbyTime >= 0) ? ride.standbyTime : 0;\r\n                    } else {\r\n                        rideObject.WaitTime = -1;\r\n                    }\r\n                }\r\n\r\n                return Promise.resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    FetchWaitTimesJSON() {\r\n        return this.FetchDeviceID().then(() => {\r\n            return this.HTTP({\r\n                url: `${this[s_apiBase]}/rest/v1/facilities/conditions`,\r\n                method: \"GET\",\r\n                headers: this.GetAPIHeaders(),\r\n            });\r\n        });\r\n    }\r\n\r\n    FetchRideData() {\r\n        return this.Cache.Wrap(\"ridedata\", () => {\r\n            // first get our English ride names\r\n            return this.GetEnglishNames().then((englishNames) => {\r\n                return this.FetchDeviceID().then(() => {\r\n                    // fetch ride data from App API\r\n                    return this.HTTP({\r\n                        url: `${this[s_apiBase]}/rest/v1/facilities`,\r\n                        method: \"GET\",\r\n                        headers: this.GetAPIHeaders(),\r\n                    }).then((body) => {\r\n                        if (!body) {\r\n                            return Promise.reject(\"Failed to find entries in ride data response\");\r\n                        }\r\n\r\n                        const rideData = {};\r\n\r\n                        for (let i = 0; i < body.attractions.length; i++) {\r\n                            const attr = body.attractions[i];\r\n\r\n                            // skip attractions from the other park\r\n                            if (attr.parkType.toLowerCase() != this[s_parkID]) continue;\r\n\r\n                            const englishData = englishNames[Number(attr.facilityCode)];\r\n\r\n                            rideData[attr.id] = {\r\n                                name: englishData && englishData.name !== undefined ? englishData.name : attr.nameKana,\r\n                                fastpass: !!attr.fastpass,\r\n                                type: attr.attractionType.id,\r\n                                facilityCode: Number(attr.facilityCode),\r\n                            };\r\n                        }\r\n\r\n                        return Promise.resolve(rideData);\r\n                    });\r\n                });\r\n            });\r\n        }, 86400);\r\n    }\r\n\r\n    GetEnglishNames() {\r\n        return this.Cache.Wrap(\"ridenames\", () => {\r\n            // fetch ride names\r\n            return this.HTTP({\r\n                url: `https://www.tokyodisneyresort.jp/en/${this[s_parkID]}/attraction.html`,\r\n                headers: {\r\n                    \"Referer\": `https://www.tokyodisneyresort.jp/en/${this[s_parkID]}/attraction.html`,\r\n                    connection: \"keep-alive\",\r\n                    \"User-Agent\": this[s_webUserAgent]\r\n                },\r\n                retryDelay: 1000 * 10\r\n            }).then((body) => {\r\n                if (!body) {\r\n                    return Promise.reject(\"Failed to find entries in English ride names data response\");\r\n                }\r\n\r\n                const regexGetRideNames = /e\">([^<]+)<\\/p>[\\s\\n]*<a href=\"\\/en\\/td[sl]\\/attraction\\/detail\\/([0-9]+)\\/\">[\\s\\n]*<div class=\"headingArea\">[\\s\\n]*<div class=\"headingAreaInner\">[\\s\\n]*<h3 class=\"heading3\">([^<]+)<\\/h3>/g;\r\n\r\n                let match;\r\n                var rideData = {};\r\n                while (match = regexGetRideNames.exec(body)) {\r\n                    rideData[Number(match[2])] = {\r\n                        name: match[3],\r\n                        area: match[1],\r\n                    };\r\n                }\r\n\r\n                // add area name to any duplicate names\r\n                for (let id in rideData) {\r\n                    const matches = [];\r\n                    for (let compId in rideData) {\r\n                        if (rideData[id].name == rideData[compId].name) {\r\n                            matches.push(compId);\r\n                        }\r\n                    }\r\n\r\n                    if (matches.length > 1) {\r\n                        for (let i = 0; i < matches.length; i++) {\r\n                            rideData[matches[i]].name = `${rideData[matches[i]].area} ${rideData[matches[i]].name}`;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // missing facility 245 from scrape?\r\n                if (rideData[244] && !rideData[245]) rideData[245] = rideData[244];\r\n\r\n                return Promise.resolve(rideData);\r\n            });\r\n        }, 86400);\r\n    }\r\n\r\n    FetchCalendarJSON() {\r\n        const today = Moment().tz(this.Timezone).format(\"YYYY-MM-DD\");\r\n        return this.FetchDeviceID().then(() => {\r\n            return this.HTTP({\r\n                url: `${this[s_apiBase]}/rest/v1/parks/calendars?since=${today}`,\r\n                method: \"GET\",\r\n                headers: this.GetAPIHeaders(),\r\n            });\r\n        });\r\n    }\r\n\r\n    FetchOpeningTimes() {\r\n        return this.FetchCalendarJSON().then((data) => {\r\n            for (let i = 0, day; day = data[i++];) {\r\n                // skip times for the wrong park\r\n                if (day.parkType.toLowerCase() != this[s_parkID]) continue;\r\n\r\n                this.Schedule.SetDate({\r\n                    date: Moment.tz(day.date, \"YYYY-MM-DD\", this.Timezone),\r\n                    openingTime: Moment.tz(`${day.date} ${day.openTime}`, \"YYYY-MM-DD HH:mm\", this.Timezone),\r\n                    closingTime: Moment.tz(`${day.date} ${day.closeTime}`, \"YYYY-MM-DD HH:mm\", this.Timezone),\r\n                    type: day.closedDay ? \"Closed\" : \"Operating\",\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = DisneyTokyoPark;"]}