{"version":3,"sources":["../lib/testonline.js"],"names":["assert","require","parks","Parks","moment","PRINTDATA","process","env","TestPark","park","describe","timeout","times","it","done","GetWaitTimes","err","_times","console","log","JSON","stringify","name","length","i","ride","ValidateType","fastPass","FastPass","status","active","schedule","GetOpeningTimes","_schedule","day","ValidateDateTime","type","obj","key","date","isValid","types","concat","objectType","t","fail","Run","PARKID","park_id"],"mappings":"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","file":"testonline.js","sourcesContent":["var assert = require(\"assert\");\r\nvar parks = require(\"./index\").Parks;\r\nvar moment = require(\"moment-timezone\");\r\n\r\n// define Mocha functions for eslint\r\n/*global describe it*/\r\n\r\n// allow console for unit tests\r\n/* eslint-disable no-console */\r\n\r\n// optional environment variable to print out API results\r\nvar PRINTDATA = process.env.PRINTDATA ? true : false;\r\n\r\nfunction TestPark(park) {\r\n    // === Test Wait Times Fetching ===\r\n    describe(\"Get Park Wait Times\", function() {\r\n        // give each test 2 minutes to finish\r\n        this.timeout(1000 * 60 * 2);\r\n\r\n        var times = [];\r\n\r\n        it(\"should not return an error fetching ride times\", function(done) {\r\n            park.GetWaitTimes(function(err, _times) {\r\n                times = _times;\r\n                if (PRINTDATA) console.log(JSON.stringify(times, null, 2));\r\n                assert(!err);\r\n                done(err);\r\n            });\r\n        });\r\n\r\n        it(\"should have some ride data\", function() {\r\n            assert(times);\r\n\r\n            // Sesame Place doesn't return data in downtime, so sorry. This is a bad unit test.\r\n            if (park.name == \"Sesame Place\") return;\r\n\r\n            assert(times.length > 3, \"Not enough ride times to be valid data (<= 3), actual: \" + times.length);\r\n        });\r\n\r\n        it(\"should have an ID for every ride\", function() {\r\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"id\", [\"string\", \"number\"]);\r\n        });\r\n\r\n        it(\"should have a wait time for every ride\", function() {\r\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"waitTime\", \"number\");\r\n        });\r\n\r\n        it(\"should have a name for every ride\", function() {\r\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"name\", \"string\");\r\n        });\r\n\r\n        it(\"should have an active state for every ride\", function() {\r\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"active\", \"boolean\");\r\n        });\r\n\r\n        it(\"should have a fastpass field for every ride\", function() {\r\n            for (var i = 0, ride; ride = times[i++];) {\r\n                ValidateType(ride, \"fastPass\", \"boolean\");\r\n\r\n                // if any ride claims to have FastPass, so should the park\r\n                if (ride.fastPass) {\r\n                    assert(park.FastPass, \"If any ride has fastPass available, the park should also support FastPass\");\r\n                }\r\n            }\r\n        });\r\n\r\n        it(\"should have a status field for every ride\", function() {\r\n            for (var i = 0, ride; ride = times[i++];) {\r\n                ValidateType(ride, \"status\", \"string\");\r\n                // status string should only ever be one of these three options\r\n                assert(\r\n                    ride.status == \"Operating\" || ride.status == \"Refurbishment\" || ride.status == \"Closed\" || ride.status == \"Down\",\r\n                    \"Invalid status string returned by \" + ride.name + \": \" + ride.status\r\n                );\r\n            }\r\n        });\r\n\r\n        it(\"should have matching status and active fields\", function() {\r\n            for (var i = 0, ride; ride = times[i++];) {\r\n                // check status and active variables match up\r\n                if (ride.status == \"Operating\") assert(ride.active, \"Ride cannot have Operating status and be inactive\");\r\n                else assert(!ride.active, \"Ride can't be active without Operating status\");\r\n            }\r\n        });\r\n    });\r\n\r\n    // === Test Schedule Fetching ===\r\n    describe(\"Get Schedule\", function() {\r\n        // give each test 2 minutes to finish\r\n        this.timeout(1000 * 60 * 2);\r\n\r\n        var schedule = [];\r\n        it(\"should not error when fetching schedule\", function(done) {\r\n            park.GetOpeningTimes(function(err, _schedule) {\r\n                assert(!err, \"GetOpeningTimes returned an error: \" + err);\r\n\r\n                schedule = _schedule;\r\n\r\n                if (PRINTDATA) console.log(JSON.stringify(schedule, null, 2));\r\n\r\n                done(err);\r\n            });\r\n        });\r\n\r\n        it(\"should have schedule data\", function() {\r\n            assert(schedule);\r\n            assert(schedule.length > 3, \"Should be at least 4 schedule items. Found \" + schedule.length);\r\n        });\r\n\r\n        it(\"should have a valid date for each schedule entry\", function() {\r\n            for (var i = 0, day; day = schedule[i++];) ValidateDateTime(day, \"date\");\r\n        });\r\n\r\n        // skip if this day is closed\r\n        it(\"should have a valid opening time for each schedule entry\", function() {\r\n            for (var i = 0, day; day = schedule[i++];) {\r\n                if (day.type && day.type == \"Closed\") continue;\r\n                ValidateDateTime(day, \"openingTime\");\r\n            }\r\n        });\r\n\r\n        it(\"should have a valid closing time for each schedule entry\", function() {\r\n            for (var i = 0, day; day = schedule[i++];) {\r\n                if (day.type && day.type == \"Closed\") continue;\r\n                ValidateDateTime(day, \"closingTime\");\r\n            }\r\n        });\r\n\r\n        // TODO - test the \"special hours\" array has valid data too\r\n    });\r\n}\r\n\r\nfunction ValidateDateTime(obj, key) {\r\n    assert(obj, \"Date parent is not a valid object\");\r\n    assert(obj[key], \"Date field \" + key + \" is not a valid object\");\r\n\r\n    // parse date using momentjs\r\n    var date = moment(obj[key]);\r\n    //var yesterday = moment().subtract(1, \"day\");\r\n    // make sure date is valid\r\n    assert(date.isValid(), \"Date \" + obj[key] + \" is invalid\");\r\n    // dates returned should be from today onwards\r\n    // TODO - fix this logic, timezones mean that some parks will genuinely be open \"yesterday\"\r\n    //assert(date.isAfter(yesterday), \"Date \" + obj[key] + \" is before today (<= \" + yesterday.format() + \")\");\r\n}\r\n\r\nfunction ValidateType(obj, key, types) {\r\n    // force types to an array\r\n    types = [].concat(types);\r\n\r\n    assert(obj, \"Object passed to type validator is not valid\");\r\n\r\n    var objectType = typeof(obj[key]);\r\n    for (var i = 0, t; t = types[i++];) {\r\n        // exit function if we find a required type\r\n        if (objectType == t) return;\r\n    }\r\n\r\n    console.log(obj);\r\n\r\n    assert.fail(\"Object \" + obj[key] + \" is not of any required types: \" + JSON.stringify(types) + \" (got \" + objectType + \")\");\r\n}\r\n\r\nfunction Run() {\r\n    if (process.env.PARKID) {\r\n        var park_id = process.env.PARKID;\r\n        if (parks[park_id]) {\r\n            // run tests against a single park\r\n            describe(\"Park \" + parks[park_id].name, function() {\r\n                TestPark(new parks[park_id]());\r\n            });\r\n            return;\r\n        }\r\n        // else park missing, just fall through to standard full test\r\n    }\r\n\r\n    // test all parks supported (and exposed) by the API\r\n    for (var park in parks) {\r\n        describe(\"Park \" + parks[park].name, function() {\r\n            TestPark(new parks[park]());\r\n        });\r\n    }\r\n}\r\nRun();\r\n\r\n/* eslint-enable no-console */"]}