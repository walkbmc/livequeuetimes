"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MerlinPark = require("./index");

/**
 * Thorpe Park
 * @class
 * @extends MerlinPark
 */

var ThorpePark = function (_MerlinPark) {
        _inherits(ThorpePark, _MerlinPark);

        /**
         * Create a new AltonTowers object
         */
        function ThorpePark() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                _classCallCheck(this, ThorpePark);

                options.name = options.name || "Thorpe Park";
                options.timezone = options.timezone || "Europe/London";

                // set park's location as it's entrance
                options.latitude = options.latitude || 51.4055;
                options.longitude = options.longitude || -0.5105;

                // Park API options
                options.api_key = options.api_key || "a070eedc-db3a-4c69-b55a-b79336ce723f";
                options.initial_data_version = options.initial_data_version || "2017-05-24T09:57:13Z";

                // where the calendar API is hosted for opening times
                options.calendar_base = "https://www.thorpepark.com/";

                // inherit from base class
                return _possibleConstructorReturn(this, (ThorpePark.__proto__ || Object.getPrototypeOf(ThorpePark)).call(this, options));
        }

        return ThorpePark;
}(MerlinPark);

module.exports = ThorpePark;
//# sourceMappingURL=thorpepark.js.map