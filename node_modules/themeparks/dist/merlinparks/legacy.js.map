{"version":3,"sources":["../../lib/merlinparks/legacy.js"],"names":["Park","require","s_apiBase","Symbol","s_apiKey","s_resortID","MerlinPark","options","name","useragent","api_base","Error","api_key","resort_id","Promise","resolve","reject","HTTP","method","url","headers","then","data","challenge","JSON","stringify","Log","Name","GenerateAPIResponse","response","body","resort","waittimes","rideData","i","ride","rideName","_GetRideName","rideObject","GetRideObject","id","WaitTime","status","wait_time","bind","_APIRespond","undefined","module","exports"],"mappings":"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","file":"legacy.js","sourcesContent":["// include core Park class\r\nvar Park = require(\"../park\");\r\n\r\nvar s_apiBase = Symbol();\r\nvar s_apiKey = Symbol();\r\nvar s_resortID = Symbol();\r\n\r\n/**\r\n * Implements the Merlin Park API framework. Thorpe Park, Alton Towers, Chessington etc. use this API framework\r\n * @class\r\n * @extends Park\r\n */\r\nclass MerlinPark extends Park {\r\n    /**\r\n     * Create new Merlin Object.\r\n     * This object should not be called directly, but rather extended for each of the individual Merlin parks\r\n     * @param {Object} options\r\n     * @param {String} options.api_base Base URL to access the API\r\n     * @param {String} options.api_key API key to access this park's API\r\n     */\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"Merlin Park\";\r\n\r\n        // hard-code UserAgent for these parks\r\n        //  do this before calling super, so we don't get a randomly generated one\r\n        options.useragent = \"Apache-HttpClient/UNAVAILABLE (java 1.4)\";\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // custom API options\r\n        if (!options.api_base) throw new Error(\"Merlin Parks require an API base to work\");\r\n        this[s_apiBase] = options.api_base;\r\n        if (!options.api_key) throw new Error(\"Merlin Parks require an API key\");\r\n        this[s_apiKey] = options.api_key;\r\n\r\n        // optional resort ID (for Chessington etc.)\r\n        this[s_resortID] = options.resort_id;\r\n    }\r\n\r\n    /**\r\n     * Fetch Wait Times for Merlin Park\r\n     */\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            // request challenge string\r\n            this.HTTP({\r\n                method: \"POST\",\r\n                url: `${this[s_apiBase]}/queue-times`,\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                    \"Connection\": \"Keep-Alive\"\r\n                }\r\n            }).then(function(data) {\r\n                if (!data.challenge) return reject(`Failed to get challenge string from API: ${JSON.stringify(data)}`);\r\n                this.Log(`Got challenge string ${data.challenge} for park ${this.Name}`);\r\n\r\n                this.GenerateAPIResponse(data.challenge).then(function(response) {\r\n                    this.Log(`Generated response string ${response}`);\r\n\r\n                    // make API request with our response request\r\n                    this.HTTP({\r\n                        method: \"POST\",\r\n                        url: `${this[s_apiBase]}/queue-times`,\r\n                        headers: {\r\n                            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                            \"Connection\": \"Keep-Alive\"\r\n                        },\r\n                        body: {\r\n                            response: response,\r\n                            challenge: data.challenge,\r\n                            resort: this[s_resortID] || null\r\n                        }\r\n                    }).then(function(waittimes) {\r\n                        // park API results differ ever so slightly. Chessington has it under \"queue-times\", Alton Towers just returns an array\r\n                        var rideData = (waittimes[\"queue-times\"] || waittimes);\r\n\r\n                        for (var i = 0, ride; ride = rideData[i++];) {\r\n                            var rideName = this._GetRideName(ride);\r\n                            // skip if we have no name for this asset\r\n                            if (!rideName) continue;\r\n\r\n                            // apply each wait time data\r\n                            var rideObject = this.GetRideObject({\r\n                                id: ride.id,\r\n                                name: rideName,\r\n                            });\r\n\r\n                            if (!rideObject) {\r\n                                this.Log(`Failed to find ride with ID ${ride.id}`);\r\n                            } else {\r\n                                // update ride wait time\r\n                                rideObject.WaitTime = ride.status == \"closed\" ? -1 : (ride.wait_time || -1);\r\n                            }\r\n                        }\r\n\r\n                        resolve();\r\n                    }.bind(this), reject);\r\n                }.bind(this), reject);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Generate a response to a challenge for this park\r\n     * @returns {Promise<String>} Promise resolving with the challenge response for this park\r\n     */\r\n    GenerateAPIResponse(challenge) {\r\n        // each park does this very slightly differently, so each park needs to implement their own version of this\r\n        if (this._APIRespond === undefined) {\r\n            return Promise.reject(\"Park needs to implement API response function _APIRespond to make API requests\");\r\n        }\r\n        return Promise.resolve(this._APIRespond(challenge));\r\n    }\r\n\r\n    /**\r\n     * The API Base URL for this park\r\n     * @returns {String} API Base URL\r\n     */\r\n    get APIBase() {\r\n        return this[s_apiBase];\r\n    }\r\n\r\n    /**\r\n     * API Key for this park\r\n     * @returns {String} Park's API Key\r\n     */\r\n    get APIKey() {\r\n        return this[s_apiKey];\r\n    }\r\n}\r\n\r\n// export the class\r\nmodule.exports = MerlinPark;"]}