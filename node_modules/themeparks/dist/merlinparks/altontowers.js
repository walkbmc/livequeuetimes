"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MerlinPark = require("./index");

/**
 * Alton Towers
 * @class
 * @extends MerlinPark
 */

var AltonTowers = function (_MerlinPark) {
    _inherits(AltonTowers, _MerlinPark);

    /**
     * Create a new AltonTowers object
     */
    function AltonTowers() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, AltonTowers);

        options.name = options.name || "Alton Towers";
        options.timezone = options.timezone || "Europe/London";

        // set park's location as it's entrance
        options.latitude = options.latitude || 52.991064;
        options.longitude = options.longitude || -1.892292;

        // Park API options
        options.api_key = options.api_key || "5bf34ca0-1428-4163-8dde-f4db4eab6683";
        options.initial_data_version = options.initial_data_version || "2017-06-08T08:06:24Z";

        // where the calendar API is hosted for opening times
        options.calendar_base = "https://www.altontowers.com/";

        // inherit from base class
        return _possibleConstructorReturn(this, (AltonTowers.__proto__ || Object.getPrototypeOf(AltonTowers)).call(this, options));
    }

    _createClass(AltonTowers, [{
        key: "FetchParkData",
        value: function FetchParkData(version) {
            var _this2 = this;

            // first, try to call base version (so when data appears, it will start fetching live data)
            return new Promise(function (resolve) {
                return _get(AltonTowers.prototype.__proto__ || Object.getPrototypeOf(AltonTowers.prototype), "FetchParkData", _this2).call(_this2, version).then(resolve).catch(function () {
                    // return fallback data if data isn't live yet
                    return resolve({
                        Item: dataCache
                    });
                });
            });
        }
    }]);

    return AltonTowers;
}(MerlinPark);

module.exports = AltonTowers;

/* eslint-disable */
var dataCache = [{
    "_id": "4188",
    "Name": "Nemesis"
}, {
    "_id": "4189",
    "Name": "Galactica"
}, {
    "_id": "4190",
    "Name": "The Blade"
}, {
    "_id": "4192",
    "Name": "Oblivion"
}, {
    "_id": "4193",
    "Name": "The Smiler"
}, {
    "_id": "4194",
    "Name": "Spinball Whizzer"
}, {
    "_id": "4195",
    "Name": "Rita"
}, {
    "_id": "4196",
    "Name": "TH13TEEN"
}, {
    "_id": "4197",
    "Name": "Runaway Mine Train"
}, {
    "_id": "4205",
    "Name": "Octonauts Rollercoaster Adventure"
}, {
    "_id": "4206",
    "Name": "Postman Pat Parcel Post"
}, {
    "_id": "4208",
    "Name": "Duel - The Haunted House Strikes Back"
}, {
    "_id": "4209",
    "Name": "In The Night Garden Magical Boat Ride"
}, {
    "_id": "4210",
    "Name": "Mr. Bloom's Allotment"
}, {
    "_id": "4211",
    "Name": "Justin's House Pie-O-Matic Factory"
}, {
    "_id": "4214",
    "Name": "Marauder's Mayhem"
}, {
    "_id": "4216",
    "Name": "Charlie and Lola's Moonsquirters & Greendrops"
}, {
    "_id": "4217",
    "Name": "The Numtums Number-Go-Round"
}, {
    "_id": "4219",
    "Name": "Get Set Go Tree Top Adventure"
}, {
    "_id": "4221",
    "Name": "Frog Hopper"
}, {
    "_id": "4223",
    "Name": "Heave Ho"
}, {
    "_id": "4224",
    "Name": "Gallopers Carousel"
}, {
    "_id": "4225",
    "Name": "Congo River Rapids"
}, {
    "_id": "4227",
    "Name": "Enterprise"
}, {
    "_id": "4231",
    "Name": "Battle Galleons"
}, {
    "_id": "4505",
    "Name": "Hex - The Legend of the Towers"
}, {
    "_id": "4524",
    "Name": "Cuckoo Cars Driving School"
}, {
    "_id": "4525",
    "Name": "Go Jetters Vroomster Zoom Ride"
}, {
    "_id": "4533",
    "Name": "The Furchester Hotel Live Show"
}, {
    "_id": "4773",
    "Name": "Wicker Man"
}];
/* eslint-enable */
//# sourceMappingURL=altontowers.js.map