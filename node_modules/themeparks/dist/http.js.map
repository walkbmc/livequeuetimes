{"version":3,"sources":["../lib/http.js"],"names":["needle","require","Log","Promise","MakeRequest","networkRequest","arguments","length","reject","url","requestMethod","method","requestURL","requestData","data","body","retries","retryDelay","returnFullResponse","forceJSON","resolve","attempt","attemptRequest","request","err","resp","statusCode","JSON","stringify","setTimeout","headers","indexOf","constructor","JSONData","parse","e","process","nextTick","bind","module","exports"],"mappings":"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","file":"http.js","sourcesContent":["\"use strict\";\r\n\r\n// this is a basic wrapper for making Request() requests\r\n//  we wrap this so we can have the same debug information for all requests\r\n\r\nvar needle = require(\"needle\");\r\n\r\n// get our project Log function for writing log output\r\nvar Log = require(\"./debugPrint\");\r\n\r\n// include our Promise library\r\nvar Promise = require(\"./promise\");\r\n\r\n/**\r\n * Make a network request\r\n * @private\r\n * @param parameters to pass to request library\r\n */\r\nfunction MakeRequest(networkRequest) {\r\n    if (arguments.length != 1) {\r\n        return Promise.reject(\"HTTP requires 1 argument. The network object configuration\");\r\n    }\r\n\r\n    // debug log if we're in debug mode\r\n    Log(`Making request to ${networkRequest.url}`);\r\n\r\n    // grab method from the request (we'll call .[method] directly using the needle library)\r\n    var requestMethod = networkRequest.method || \"get\";\r\n    delete networkRequest.method;\r\n\r\n    // extract the required URL\r\n    var requestURL = networkRequest.url;\r\n    if (!requestURL) return Promise.reject(`No URL defined for ${requestMethod} request`);\r\n    delete networkRequest.url;\r\n\r\n    var requestData = networkRequest.data || networkRequest.body || {};\r\n    delete networkRequest.data;\r\n    delete networkRequest.body;\r\n\r\n    // build-in retires into this wrapper (default 3)\r\n    var retries = networkRequest.retries || 3;\r\n    // un-set retries in-case request suddenly supports this or something!\r\n    delete networkRequest.retries;\r\n\r\n    // default delay of 2 seconds for each retry attempt\r\n    var retryDelay = networkRequest.retryDelay || 2000;\r\n    delete networkRequest.retryDelay;\r\n\r\n    // we will default to returning the body, but can return the full response object if we want\r\n    var returnFullResponse = networkRequest.returnFullResponse || false;\r\n    delete networkRequest.returnFullResponse;\r\n\r\n    // add ability to force responses into JSON objects, even if they don't return application/json content header\r\n    var forceJSON = networkRequest.forceJSON || false;\r\n    delete networkRequest.forceJSON;\r\n\r\n    // return result as a Promise!\r\n    return new Promise(function(resolve, reject) {\r\n        var attempt = 0;\r\n\r\n        // make request in an anonymouse function so we can make multiple requests to it easily\r\n        var attemptRequest = function() {\r\n            Log(`Calling ${requestMethod}:${requestURL}`);\r\n\r\n            // build Needle request\r\n            needle.request(requestMethod, requestURL, requestData, networkRequest, function(err, resp) {\r\n                if (err || resp.statusCode >= 400 || (resp.statusCode == 200 && !resp.body)) {\r\n                    Log(`Network request failed attempt ${attempt}/${retries} for URL ${requestURL}`);\r\n                    Log(err || (resp.statusCode + \": \" + JSON.stringify(resp.body, null, 2)));\r\n\r\n                    // if we have retires left, try again!\r\n                    attempt++;\r\n                    if (attempt < retries) {\r\n                        // try again after retryDelay milliseconds\r\n                        setTimeout(attemptRequest, retryDelay);\r\n                        return;\r\n                    } else {\r\n                        return reject(err || (resp.statusCode + \": \" + JSON.stringify(resp.body, null, 2)));\r\n                    }\r\n                }\r\n\r\n                // no error! return the result\r\n                if (returnFullResponse) {\r\n                    Log(`Successfully fetched response for URL ${requestURL}`);\r\n                    return resolve(resp);\r\n                } else {\r\n                    // enable \"forceJSON\" if the return header type is \"application/json\"\r\n                    if (resp.headers && resp.headers[\"content-type\"] && resp.headers[\"content-type\"].indexOf(\"application/json\") >= 0) {\r\n                        Log(\"Found 'application/json' header from in HTTP request, parsing JSON data\");\r\n                        forceJSON = true;\r\n                    }\r\n\r\n                    // if we want to force JSON (and we're not already a JSON object!)\r\n                    if (forceJSON && resp.body.constructor !== {}.constructor && resp.body.constructor !== [].constructor) {\r\n                        let JSONData = null;\r\n                        try {\r\n                            JSONData = JSON.parse(resp.body);\r\n                        } catch (e) {\r\n                            Log(`Error pasing JSON data: ${e}`);\r\n                            JSONData = null;\r\n                        }\r\n\r\n                        if (JSONData === null) {\r\n                            // if we have retires left, try again!\r\n                            attempt++;\r\n                            if (attempt < retries) {\r\n                                // try again after retryDelay milliseconds\r\n                                setTimeout(attemptRequest, retryDelay);\r\n                                return;\r\n                            } else {\r\n                                return reject(`Unable to parse ${resp.body} into a JSON object`);\r\n                            }\r\n                        }\r\n\r\n                        Log(`Successfully fetched and parsed JSON from response at ${requestURL}`);\r\n                        return resolve(JSONData);\r\n                    } else {\r\n                        Log(`Successfully fetched body for URL ${requestURL}`);\r\n                        return resolve(resp.body);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        // make first request attempt\r\n        process.nextTick(attemptRequest);\r\n    }.bind(this));\r\n}\r\n\r\nmodule.exports = MakeRequest;"]}