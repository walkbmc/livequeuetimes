{"version":3,"sources":["../../lib/bellewaerde/index.js"],"names":["Park","require","Moment","rawRideData","rideData","i","ride","code","s_apiBase","Symbol","s_calendarURL","Bellewaerde","options","name","timezone","latitude","longitude","api_base","calendarURL","Promise","resolve","reject","HTTP","url","then","waittimes","rideNames","ridetime","id","type","rideObject","GetRideObject","WaitTime","Number","wait","bind","endYear","tz","Timezone","add","ScheduleDays","datePointer","years","Log","format","isSameOrBefore","push","all","map","year","FetchYearOpeningTimes","results","hours","times","Schedule","SetDate","method","data","_format","json","openingJSON","result","Object","keys","opening_hours","forEach","key","status","date","openingTime","mo_time","closingTime","mc_time","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// include core Park class\r\nvar Park = require(\"../park\");\r\n\r\nvar Moment = require(\"moment-timezone\");\r\n\r\nvar rawRideData = require(\"./bellewaerdeData.js\");\r\nvar rideData = {};\r\nfor (var i = 0, ride; ride = rawRideData[i++];) {\r\n    rideData[ride.code] = ride;\r\n}\r\n\r\nvar s_apiBase = Symbol();\r\nvar s_calendarURL = Symbol();\r\n\r\n/**\r\n * Implements the Bellewaerde Park API\r\n * @class\r\n * @extends Park\r\n */\r\nclass Bellewaerde extends Park {\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"Bellewaerde\";\r\n        options.timezone = options.timezone || \"Europe/Brussels\";\r\n        options.latitude = options.latitude || 50.846996;\r\n        options.longitude = options.longitude || 2.947948;\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // API Options\r\n        this[s_apiBase] = options.api_base || \"http://bellewaer.de/realtime/api/\";\r\n        this[s_calendarURL] = options.calendarURL || \"https://www.bellewaerde.be/en/api/calendar/\";\r\n    }\r\n\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.HTTP({\r\n                url: this[s_apiBase] + \"api-realtime.php\"\r\n            }).then(function(waittimes) {\r\n                // loop over returned data\r\n                var rideNames = {};\r\n\r\n                for (var i = 0, ridetime; ridetime = waittimes[i++];) {\r\n                    // Filter attractions from poi\r\n                    if (rideData[ridetime.id] && rideData[ridetime.id].type === \"Attractions\") {\r\n                        var rideObject = this.GetRideObject({\r\n                            id: ridetime.id,\r\n                            name: rideData[ridetime.id].name,\r\n                        });\r\n\r\n                        rideObject.WaitTime = Number(ridetime.wait) || 0;\r\n                    }\r\n                }\r\n\r\n                resolve(rideNames);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Request park opening times.\r\n     * @returns {Promise}\r\n     */\r\n    FetchOpeningTimes() {\r\n        // calculate how many (and which) years we want to check\r\n        const endYear = Moment().tz(this.Timezone).add(this.ScheduleDays, \"days\");\r\n        var datePointer = Moment().tz(this.Timezone);\r\n        const years = [];\r\n\r\n        this.Log(`Fetching opening hours between ${datePointer.format()} and ${endYear.format()}`);\r\n\r\n        // slide along between start and end until we go past endYear to get an array of required year combos\r\n        while (datePointer.isSameOrBefore(endYear, \"year\")) {\r\n            years.push(datePointer.format(\"YYYY\"));\r\n            datePointer.add(1, \"year\");\r\n        }\r\n\r\n        // loop through each year, calling FetchYearOpeningTimes\r\n        return Promise.all(years.map((year) => {\r\n            return this.FetchYearOpeningTimes(year);\r\n        })).then((results) => {\r\n            // inject results into calendar\r\n            results.map((hours) => {\r\n                hours.map((times) => {\r\n                    this.Schedule.SetDate(times);\r\n                });\r\n            });\r\n\r\n            return results;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch park opening times for a specific year and add to park's opening times\r\n     * @param {String} [year]\r\n     */\r\n    FetchYearOpeningTimes(year) {\r\n        return this.HTTP({\r\n            url: this[s_calendarURL] + year,\r\n            method: \"GET\",\r\n            data: {\r\n                _format: \"json\"\r\n            },\r\n            json: true\r\n        }).then((openingJSON) => {\r\n            if (openingJSON === null) {\r\n                return Promise.reject(\"API didn't return expected format\");\r\n            }\r\n\r\n            var result = [];\r\n            Object.keys(openingJSON.opening_hours).forEach((key) => {\r\n                //FYI, status: \"open\" / \"closed\" / \"soldout\"\r\n                if (openingJSON.opening_hours[key].status === \"open\") {\r\n                    result.push({\r\n                        date: Moment.tz(`${key}/${year}`, \"MM/DD/YYYY\", this.Timezone),\r\n                        openingTime: Moment.tz(`${key}/${year}${openingJSON.opening_hours[key].mo_time}`, \"MM/DD/YYYYHH:mm\", this.Timezone),\r\n                        closingTime: Moment.tz(`${key}/${year}${openingJSON.opening_hours[key].mc_time}`, \"MM/DD/YYYYHH:mm\", this.Timezone),\r\n                        type: \"Operating\"\r\n                    });\r\n                } else {\r\n                    result.push({\r\n                        date: Moment.tz(`${key}/${year}`, \"MM/DD/YYYY\", this.Timezone),\r\n                        type: \"Closed\"\r\n                    });\r\n                }\r\n            });\r\n\r\n            Promise.resolve(result);\r\n        });\r\n    }\r\n}\r\n\r\n// export the class\r\nmodule.exports = Bellewaerde;"]}