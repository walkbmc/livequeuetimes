{"version":3,"sources":["../../lib/sixflags/index.js"],"names":["Park","require","Moment","s_parkID","Symbol","s_authToken","s_baseURL","s_apiVersion","SixFlagsPark","options","name","park_id","Error","auth_token","api_url","api_version","Promise","resolve","reject","GetRideNames","then","rideNames","GetAPIUrl","url","APIBase","rideData","rideStatuses","i","ride","rideObject","GetRideObject","id","rideId","WaitTime","status","parseInt","waitTime","bind","scheduleData","message","operatingHours","day","thisDay","operatingDate","Schedule","SetDate","openingTime","open","tz","Timezone","closingTime","close","type","ttl","Cache","Wrap","HTTP","method","headers","data","forceJSON","body","access_token","Log","expires_in","rides","FastPass","isFlashPassEligible","requestObject","GetAccessToken","Connection","Authorization","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\nvar Park = require(\"../park\");\r\nvar Moment = require(\"moment-timezone\");\r\n\r\nvar s_parkID = Symbol();\r\n\r\nvar s_authToken = Symbol();\r\nvar s_baseURL = Symbol();\r\nvar s_apiVersion = Symbol();\r\n\r\n/**\r\n * Implements the SixFlags API framework.\r\n * @class\r\n * @extends Park\r\n */\r\nclass SixFlagsPark extends Park {\r\n    /**\r\n     * Create new SixFlagsPark Object.\r\n     * This object should not be called directly, but rather extended for each of the individual SixFlags parks\r\n     * @param {Object} options\r\n     * @param {String} options.park_id\r\n     * @param {String} [options.auth_token] Auth token for logging into the SixFlags API\r\n     * @param {String} [options.api_url] URL for accessing the SixFlags API (default: https://api.sixflags.net/)\r\n     * @param {String} [options.api_version] API version (default: 6)\r\n     */\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"SixFlags Park\";\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // assign park configurations\r\n        if (!options.park_id) throw new Error(\"Missing park's API ID\");\r\n        this[s_parkID] = options.park_id;\r\n\r\n        this[s_authToken] = options.auth_token || \"MEExQ0RGNjctMjQ3Ni00Q0IyLUFCM0ItMTk1MTNGMUY3NzQ3Ok10WEVKU0hMUjF5ekNTS3FBSVZvWmt6d2ZDUUFUNEIzTVhIZ20rZVRHU29xSkNBRDRXUHlIUnlYK0drcFZYSHJBNU9ZdUFKRHYxU3p3a3UxWS9sM0Z3PT0=\";\r\n        this[s_baseURL] = options.api_url || \"https://api.sixflags.net/\";\r\n        this[s_apiVersion] = options.api_version || \"6\";\r\n    }\r\n\r\n    /**\r\n     * Get the API base URL for making API requests\r\n     * @returns {String} Base URL for the park's API (eg. https://api.sixflags.net/api/v6/)\r\n     */\r\n    get APIBase() {\r\n        return `${this[s_baseURL]}api/v${this[s_apiVersion]}/`;\r\n    }\r\n\r\n    // override this from the base class to declare this park supports a FastPass-style service\r\n    get FastPass() {\r\n        return true;\r\n    }\r\n\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.GetRideNames().then(function(rideNames) {\r\n                this.GetAPIUrl({\r\n                    url: `${this.APIBase}park/${this[s_parkID]}/rideStatus`\r\n                }).then(function(rideData) {\r\n                    if (!rideData || !rideData.rideStatuses) return reject(\"Missing ridestatuses from API response\");\r\n\r\n                    // loop over rides\r\n                    for (var i = 0, ride; ride = rideData.rideStatuses[i++];) {\r\n                        // find/create this ride in our park object\r\n                        var rideObject = this.GetRideObject({\r\n                            id: ride.rideId,\r\n                            name: rideNames[ride.rideId]\r\n                        });\r\n\r\n                        if (rideObject) {\r\n                            // update ride time\r\n                            rideObject.WaitTime = (ride.status == \"AttractionStatusOpen\" ? (parseInt(ride.waitTime, 10) || -1) : -1);\r\n                        }\r\n                    }\r\n\r\n                    resolve();\r\n                }.bind(this), reject);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    FetchOpeningTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.GetAPIUrl({\r\n                url: `${this.APIBase}park/${this[s_parkID]}/hours`\r\n            }).then(function(scheduleData) {\r\n                if (scheduleData.message && scheduleData.message == \"No operating hours found for this park\") {\r\n                    // edge-case! park is closed forever! (or not open yet)\r\n                    return resolve();\r\n                }\r\n\r\n                if (!scheduleData.operatingHours) return reject(\"No operating hours returned by park\");\r\n\r\n                for (var i = 0, day; day = scheduleData.operatingHours[i++];) {\r\n                    var thisDay = Moment(day.operatingDate, \"YYYY-MM-DDTHH:mm:ss\");\r\n                    this.Schedule.SetDate({\r\n                        openingTime: day.open ? Moment.tz(day.open, \"YYYY-MM-DDTHH:mm:ss\", this.Timezone) : thisDay,\r\n                        closingTime: day.close ? Moment.tz(day.close, \"YYYY-MM-DDTHH:mm:ss\", this.Timezone) : thisDay,\r\n                        type: \"Operating\",\r\n                    });\r\n                }\r\n\r\n                resolve();\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Get an access token for making Six Flags API requests\r\n     */\r\n    GetAccessToken() {\r\n        // default ttl for an access token (in case we don't get an expirey time correctly)\r\n        var ttl = 60 * 30;\r\n        return this.Cache.Wrap(\"accesstoken\", function() {\r\n            return new Promise(function(resolve, reject) {\r\n                this.HTTP({\r\n                    url: `${this[s_baseURL]}Authentication/identity/connect/token`,\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Authorization\": `Basic ${this[s_authToken]}`,\r\n                        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                    },\r\n                    data: {\r\n                        \"grant_type\": \"client_credentials\",\r\n                        \"scope\": \"mobileApp\",\r\n                    },\r\n                    forceJSON: true\r\n                }).then(function(body) {\r\n                    if (!body) return reject(\"No body returned for access token\");\r\n                    if (!body.access_token) return reject(\"No access_token returned\");\r\n\r\n                    this.Log(\"Fetched access token\", body.access_token);\r\n\r\n                    ttl = body.expires_in || 60 * 30;\r\n\r\n                    return resolve(body.access_token);\r\n                }.bind(this), reject);\r\n            }.bind(this));\r\n        }.bind(this), function() {\r\n            return ttl;\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Get rides names for all the rides in this park\r\n     * This is either fetched from cache or fresh from the API if not fetched for a while\r\n     * @returns {Promise<Object>} Object of Ride IDs => Ride Names\r\n     */\r\n    GetRideNames() {\r\n        return this.Cache.Wrap(\"rides\", function() {\r\n            return new Promise(function(resolve, reject) {\r\n                // get ride name data\r\n                this.GetAPIUrl({\r\n                    url: `${this.APIBase}park/${this[s_parkID]}/ride`\r\n                }).then(function(body) {\r\n                    if (!body) return reject(\"No body recieved\");\r\n                    if (!body.rides) return reject(\"No rides returned\");\r\n\r\n                    // interesting fields\r\n                    //  name\r\n                    //  location.latitude\r\n                    //  location.longitude\r\n                    //  location.radius\r\n                    //  rides\r\n                    //  waitTimesLastUpdated\r\n\r\n                    var rideNames = {};\r\n                    for (var i = 0, ride; ride = body.rides[i++];) {\r\n                        // interesting fields\r\n                        //  isFlashPassEligible\r\n                        //  status\r\n                        //  waitTime\r\n                        rideNames[ride.rideId] = ride.name;\r\n\r\n                        // this is also where FastPass is determined, so update our rides here\r\n                        var rideObject = this.GetRideObject({\r\n                            id: ride.rideId,\r\n                            name: ride.name\r\n                        });\r\n                        if (rideObject) {\r\n                            rideObject.FastPass = ride.isFlashPassEligible || false;\r\n                        }\r\n                    }\r\n\r\n                    resolve(rideNames);\r\n                }.bind(this), reject);\r\n            }.bind(this));\r\n        }.bind(this), 60 * 60 * 12);\r\n    }\r\n\r\n    GetAPIUrl(requestObject) {\r\n        return new Promise(function(resolve, reject) {\r\n            // grab an access token first\r\n            this.GetAccessToken().then(function(access_token) {\r\n                // make sure headers exist if they weren't set already\r\n                if (!requestObject.headers) requestObject.headers = [];\r\n                requestObject.headers[\"Accept-Language\"] = \"en-US\";\r\n                requestObject.headers.Connection = \"Keep-Alive\";\r\n                requestObject.headers.Authorization = \"Bearer \" + access_token;\r\n\r\n                // make sure we get JSON back\r\n                requestObject.forceJSON = true;\r\n\r\n                // send network request\r\n                this.HTTP(requestObject).then(resolve, reject);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n}\r\n\r\nmodule.exports = SixFlagsPark;"]}