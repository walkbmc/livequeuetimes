{"version":3,"sources":["../lib/ride.js"],"names":["Schedule","require","Moment","s_rideID","Symbol","s_rideName","s_currentWaitTime","s_fastPassAvailable","s_fastPassReturnTimeAvailable","s_fastPassReturnTimeStart","s_fastPassReturnTimeEnd","s_lastTimeUpdate","s_lastTimeFastPassUpdate","s_scheduleData","Ride","options","ride_id","ride_name","Error","openingHours","GetDate","date","jsonData","id","name","Name","active","Active","waitTime","WaitTime","fastPass","FastPass","lastUpdate","LastUpdate","status","Status","fastPassReturnTime","startTime","FastPassReturnTimeStart","endTime","FastPassReturnTimeEnd","schedule","rideData","SetDate","special","length","i","specialSchedule","openingTime","closingTime","type","specialHours","value","undefined","Date","now","isSame","format","todaysSchedule","module","exports"],"mappings":"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","file":"ride.js","sourcesContent":["// our schedule library\r\nvar Schedule = require(\"./schedule\");\r\nvar Moment = require(\"moment-timezone\");\r\n\r\n// symbols\r\nvar s_rideID = Symbol();\r\nvar s_rideName = Symbol();\r\nvar s_currentWaitTime = Symbol();\r\nvar s_fastPassAvailable = Symbol();\r\nvar s_fastPassReturnTimeAvailable = Symbol();\r\nvar s_fastPassReturnTimeStart = Symbol();\r\nvar s_fastPassReturnTimeEnd = Symbol();\r\nvar s_lastTimeUpdate = Symbol();\r\nvar s_lastTimeFastPassUpdate = Symbol();\r\nvar s_scheduleData = Symbol();\r\n\r\n/**\r\n * @typedef RideData\r\n * @type Object\r\n * @property {String} id Unique Ride ID\r\n * @property {String} name The ride's name\r\n * @property {Bool} active Is this ride currently operating?\r\n * @property {Number} wait_time Ride's current queue time\r\n * @property {Number} last_update Last time this Ride has a wait time change (in milliseconds)\r\n */\r\n\r\n/**\r\n * Ride Class\r\n * Each ride object represents one ride at a theme park.\r\n * This object will hold the ride's current state.\r\n * @class\r\n */\r\nclass Ride {\r\n    /**\r\n     * Create a new Ride object\r\n     * @param {Object} options New ride data\r\n     * @param {String} options.ride_id Ride's Unique ID\r\n     * @param {String} options.ride_name Ride name\r\n     */\r\n    constructor(options = {\r\n        ride_id: null,\r\n        ride_name: null\r\n    }) {\r\n        if (!options.ride_id) throw new Error(\"No ride ID supplied to new ride object\");\r\n        if (!options.ride_name || options.ride_name == \"\") throw new Error(\"No ride name supplied to new ride object\");\r\n\r\n        this[s_rideID] = options.ride_id;\r\n        this[s_rideName] = options.ride_name;\r\n\r\n        // by default, rides don't support fastpass\r\n        this[s_fastPassAvailable] = false;\r\n\r\n        // make our own schedule data object!\r\n        this[s_scheduleData] = new Schedule();\r\n    }\r\n\r\n    /**\r\n     * Serialize this object (automatically called by JSON.stringify etc.)\r\n     * @returns {RideData} Current ride state\r\n     */\r\n    toJSON() {\r\n        // try to extract schedule data for this ride\r\n        var openingHours = this[s_scheduleData].GetDate({\r\n            date: Moment(),\r\n        });\r\n        var jsonData = {\r\n            id: this[s_rideID],\r\n            name: this.Name,\r\n            active: this.Active,\r\n            waitTime: this.WaitTime,\r\n            fastPass: this.FastPass,\r\n            lastUpdate: this.LastUpdate,\r\n            status: this.Status\r\n        };\r\n\r\n        // add fastPass return times (if available)\r\n        if (this[s_fastPassReturnTimeAvailable]) {\r\n            jsonData.fastPassReturnTime = {\r\n                startTime: this.FastPassReturnTimeStart,\r\n                endTime: this.FastPassReturnTimeEnd,\r\n                lastUpdate: this[s_lastTimeFastPassUpdate]\r\n            };\r\n        }\r\n\r\n        // add opening hours to ride data if we actually have any!\r\n        if (openingHours) {\r\n            jsonData.schedule = openingHours;\r\n        }\r\n\r\n        return jsonData;\r\n    }\r\n\r\n    /** \r\n     * Restore a state from a JSON object\r\n     * Mainly used to restore ride data from cached data\r\n     * @param {RideData} rideData Ride data to restore (ideally created using toJSON)\r\n     */\r\n    fromJSON(rideData) {\r\n        // restore base ride data\r\n        this[s_rideID] = rideData.id;\r\n        this[s_rideName] = rideData.name;\r\n        this[s_lastTimeUpdate] = rideData.lastUpdate;\r\n        this[s_fastPassAvailable] = rideData.fastPass;\r\n\r\n        // .Active is inferred by WaitTime\r\n        if (!rideData.active) {\r\n            // set WaitTime to -1 if the ride isn't active\r\n            this[s_currentWaitTime] = -1;\r\n        } else {\r\n            this[s_currentWaitTime] = rideData.waitTime;\r\n        }\r\n\r\n        // import any schedule data (if we have any)\r\n        if (rideData.schedule) {\r\n            this[s_scheduleData].SetDate(rideData.schedule);\r\n\r\n            // also re-import special schedule data (if we have any)\r\n            if (rideData.schedule.special && rideData.schedule.special.length > 0) {\r\n                for (var i, specialSchedule; specialSchedule = rideData.schedule.special[i++];) {\r\n                    this[s_scheduleData].SetDate({\r\n                        date: specialSchedule.date,\r\n                        openingTime: specialSchedule.openingTime,\r\n                        closingTime: specialSchedule.closingTime,\r\n                        type: specialSchedule.type,\r\n                        specialHours: true\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get this ride's name\r\n     * Note: Will attempt to return in English, but will fallback to park's local locale if English isn't available\r\n     * @type {String}\r\n     */\r\n    get Name() {\r\n        return this[s_rideName];\r\n    }\r\n\r\n    /**\r\n     * Set this ride's wait time\r\n     * Set to -1 when ride is Closed\r\n     * Set to -2 when ride is Down\r\n     * @type {Number}\r\n     */\r\n    set WaitTime(value) {\r\n        // check for updated (or brand new) wait time for this ride\r\n        if (this[s_currentWaitTime] === undefined || this[s_currentWaitTime] != value) {\r\n            // update our last updated time to now\r\n            this[s_lastTimeUpdate] = Date.now();\r\n            // update our wait time for this ride\r\n            this[s_currentWaitTime] = value;\r\n        }\r\n\r\n        // value hasn't changed, don't do anything\r\n    }\r\n\r\n    /**\r\n     * Get this ride's current wait time. Will always be >= 0.\r\n     * Use .Active to determine ride's open status\r\n     * @type {Number}\r\n     */\r\n    get WaitTime() {\r\n        // always return positive ints for the wait time, even when inactive or not defined yet\r\n        if (this[s_currentWaitTime] === undefined || this[s_currentWaitTime] < 0) return 0;\r\n\r\n        return this[s_currentWaitTime];\r\n    }\r\n\r\n    /**\r\n     * Set this ride's fast pass availability\r\n     * @type {Boolean}\r\n     */\r\n    set FastPass(value) {\r\n        if (this[s_fastPassAvailable] != value) {\r\n            // update our last updated time to now\r\n            this[s_lastTimeUpdate] = Date.now();\r\n            // update fastpass status\r\n            this[s_fastPassAvailable] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get this ride's fast pass availability\r\n     * @type {Boolean}\r\n     */\r\n    get FastPass() {\r\n        return this[s_fastPassAvailable];\r\n    }\r\n\r\n    /**\r\n     * Set whether we have valid fast pass return times or not\r\n     * Setting start/end times automatically sets this to true, only need to call this if fastPass availability has ran out\r\n     * @type {Boolean}\r\n     */\r\n    set FastPassReturnTimeAvailable(value) {\r\n        if (value != this[s_fastPassReturnTimeAvailable]) {\r\n            // update availability\r\n            this[s_fastPassReturnTimeAvailable] = value;\r\n            // update our last fastPass updated time to now\r\n            this[s_lastTimeFastPassUpdate] = Date.now();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Does this ride have a fastPass return time available?\r\n     */\r\n    get FastPassReturnTimeAvailable() {\r\n        return this[s_fastPassReturnTimeAvailable];\r\n    }\r\n\r\n    /**\r\n     * Set this ride's fastPass return time window start\r\n     * @type {Moment} Time\r\n     */\r\n    set FastPassReturnTimeStart(value) {\r\n        // check if this fastPass is \r\n        if (!value.isSame(this[s_fastPassReturnTimeStart])) {\r\n            // mark this as true so we know to add this to our JSON object\r\n            this[s_fastPassReturnTimeAvailable] = true;\r\n            // update our last fastPass updated time to now\r\n            this[s_lastTimeFastPassUpdate] = Date.now();\r\n            // use new fastPass return start time\r\n            this[s_fastPassReturnTimeStart] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get this ride's fast pass return time start\r\n     * @type {String} Time in format of \"HH:mm\"\r\n     */\r\n    get FastPassReturnTimeStart() {\r\n        return this[s_fastPassReturnTimeStart].format(\"HH:mm\");\r\n    }\r\n\r\n    /**\r\n     * Set this ride's fastPass return time window end\r\n     * @type {Moment} Time\r\n     */\r\n    set FastPassReturnTimeEnd(value) {\r\n        // check if this fastPass is \r\n        if (!value.isSame(this[s_fastPassReturnTimeEnd])) {\r\n            // mark this as true so we know to add this to our JSON object\r\n            this[s_fastPassReturnTimeAvailable] = true;\r\n            // update our last fastPass updated time to now\r\n            this[s_lastTimeFastPassUpdate] = Date.now();\r\n            // use new fastPass return end time\r\n            this[s_fastPassReturnTimeEnd] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get this ride's fast pass return time emd\r\n     * @type {String} Time in format of \"HH:mm\"\r\n     */\r\n    get FastPassReturnTimeEnd() {\r\n        return this[s_fastPassReturnTimeEnd].format(\"HH:mm\");\r\n    }\r\n\r\n    /**\r\n     * Is this ride currently running?\r\n     * @type {Boolean}\r\n     */\r\n    get Active() {\r\n        // if we have no data yet, assume ride is inactive\r\n        if (this[s_currentWaitTime] === undefined) return false;\r\n\r\n        return this[s_currentWaitTime] >= 0;\r\n    }\r\n\r\n    /**\r\n     * String status for this ride\r\n     * Can only ever be either \"Operating\", \"Down\", \"Closed\", or \"Refurbishment\"\r\n     * @type {String}\r\n     */\r\n    get Status() {\r\n        // first, check the schedule for non-operating types\r\n        //  refurbishment/closed schedule overrules all other statuses, as this is planned maintenance\r\n        //  i.e, rides don't usually schedule maintenance and then randomly open mid-day \r\n        var todaysSchedule = this.Schedule.GetDate({\r\n            date: Moment()\r\n        });\r\n        if (todaysSchedule && todaysSchedule.type != \"Operating\") {\r\n            return todaysSchedule.type;\r\n        }\r\n\r\n        // wait time set to -3 when ride is down for Refurbishment\r\n        if (this[s_currentWaitTime] == -3) return \"Refurbishment\";        \r\n        \r\n        // wait time set to -2 when ride is Down\r\n        if (this[s_currentWaitTime] == -2) return \"Down\";\r\n\r\n        // otherwise, return a string matching current Active status\r\n        return (this.Active ? \"Operating\" : \"Closed\");\r\n    }\r\n\r\n    /**\r\n     * Get this ride's last wait time update time.\r\n     * Note: Can be undefined\r\n     * @type {Number}\r\n     */\r\n    get LastUpdate() {\r\n        return this[s_lastTimeUpdate];\r\n    }\r\n\r\n    /**\r\n     * Get this ride's schedule object\r\n     * @type {Schedule}\r\n     */\r\n    get Schedule() {\r\n        return this[s_scheduleData];\r\n    }\r\n}\r\n\r\n// export the Ride class\r\nmodule.exports = Ride;\r\n"]}