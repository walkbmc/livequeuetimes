{"version":3,"sources":["../../lib/te2/index.js"],"names":["Park","require","Moment","s_parkID","Symbol","s_authToken","s_apiBase","s_rideTypes","TE2Park","options","name","park_id","Error","auth_token","console","error","api_base","ride_types","Promise","resolve","reject","GetRideNames","then","rideNames","GetAPIUrl","url","waitTimeData","i","ride","id","rideObject","GetRideObject","status","WaitTime","waitTime","isOpen","bind","tz","Timezone","format","data","days","scheduleData","day","thisDay","date","Schedule","SetDate","openingTime","open","closingTime","close","type","Cache","Wrap","FetchRideNames","Log","Name","rideData","poi","indexOf","label","requestObject","headers","Authorization","forceJSON","HTTP","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\nvar Park = require(\"../park\");\r\nvar Moment = require(\"moment-timezone\");\r\n\r\nvar s_parkID = Symbol();\r\nvar s_authToken = Symbol();\r\nvar s_apiBase = Symbol();\r\nvar s_rideTypes = Symbol();\r\n\r\n// this used to be \"SeaWorld Park\" base, but now it seems SeaWorld have dropped TE2, so refactor this for their other clients.\r\n\r\n/**\r\n * Implements the The Experience Engine API framework.\r\n * @class\r\n * @extends Park\r\n */\r\nclass TE2Park extends Park {\r\n    /**\r\n     * Create new TE2Park Object.\r\n     * This object should not be called directly, but rather extended for each of the individual TE2 parks\r\n     * @param {Object} options\r\n     * @param {String} options.park_id ID of the park to access the API for\r\n     * @param {String} [options.auth_token] Auth token to use to connect to the API\r\n     * @param {String} [options.api_base] Base URL to access the API\r\n     * @param {String[]} [options.ride_types] Array of types that denote rides at the park (to avoid listing restaurants/toilets etc. as rides)\r\n     */\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"TE2 Park\";\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // assign park configurations\r\n        if (!options.park_id) throw new Error(\"Missing park's API ID\");\r\n        this[s_parkID] = options.park_id;\r\n\r\n        // accept API options to override defaults if needed\r\n        this[s_authToken] = options.auth_token || \"\";\r\n        if (this[s_authToken] === \"\") {\r\n            // eslint-disable-next-line no-console\r\n            console.error(\"Please supply an 'auth_token' as a Base64 encoded username:password string for '\" + options.name + \"'. API credentials have been removed from this library at the request of the park technology operators.\");\r\n        }\r\n        this[s_apiBase] = options.api_base || \"https://seas.te2.biz/v1/rest/\";\r\n\r\n        // array of valid ride types. Some implementations of the API use various types to declare rides (eg. Family/Kid/Thrill etc.)\r\n        this[s_rideTypes] = options.ride_types || [\"Ride\", \"Coasters\", \"Family\", \"ThrillRides\", \"Kids\"];\r\n    }\r\n\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            // first make sure we have our ride names\r\n            this.GetRideNames().then(function(rideNames) {\r\n                this.GetAPIUrl({\r\n                    url: `${this[s_apiBase]}venue/${this[s_parkID]}/poi/all/status`\r\n                }).then(function(waitTimeData) {\r\n                    for (var i = 0, ride; ride = waitTimeData[i++];) {\r\n                        // find/create this ride object (only if we have a name for it)\r\n                        if (rideNames[ride.id]) {\r\n                            var rideObject = this.GetRideObject({\r\n                                id: ride.id,\r\n                                name: rideNames[ride.id]\r\n                            });\r\n\r\n                            if (rideObject && ride.status) {\r\n                                // update ride wait time\r\n                                rideObject.WaitTime = ride.status.waitTime ? ride.status.waitTime : (ride.status.isOpen ? 0 : -1);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    resolve();\r\n                }.bind(this), reject);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    FetchOpeningTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.GetAPIUrl({\r\n                url: `${this[s_apiBase]}venue/${this[s_parkID]}/hours/${Moment().tz(this.Timezone).format(\"YYYY-MM-DD\")}`,\r\n                data: {\r\n                    days: 30\r\n                }\r\n            }).then(function(scheduleData) {\r\n                for (var i = 0, day; day = scheduleData[i++];) {\r\n                    var thisDay = Moment(day.date, \"YYYY-MM-DD\");\r\n                    this.Schedule.SetDate({\r\n                        date: thisDay,\r\n                        openingTime: day.open ? Moment(day.open, \"YYYY-MM-DDTHH:mm:ss.SSSZZ\").tz(this.Timezone) : thisDay,\r\n                        closingTime: day.close ? Moment(day.close, \"YYYY-MM-DDTHH:mm:ss.SSSZZ\").tz(this.Timezone) : thisDay,\r\n                        type: day.isOpen ? \"Operating\" : \"Closed\",\r\n                    });\r\n                }\r\n\r\n                resolve();\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Get cached (or fresh fetch) of ride names\r\n     * @returns {Promise<Object>} Object of RideID => Ride name in English\r\n     */\r\n    GetRideNames() {\r\n        return new Promise(function(resolve, reject) {\r\n            // wrap cache request (cache ride names for 24 hours)\r\n            this.Cache.Wrap(\"ridenames\", this.FetchRideNames.bind(this), 60 * 60 * 24).then(resolve, reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Fetch all the rides and ride names for this park from the API (skip the cache)\r\n     * @returns {Promise<Object>} Object of RideID => Ride name in English\r\n     */\r\n    FetchRideNames() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.Log(`Fetching ride names for ${this.Name}`);\r\n\r\n            // fetch POI (points-of-interest) data from API\r\n            this.GetAPIUrl({\r\n                url: `${this[s_apiBase]}venue/${this[s_parkID]}/poi/all`\r\n            }).then(function(rideData) {\r\n                if (!rideData) return reject(\"No POI data returned from Seaworld API\");\r\n\r\n                var rideNames = {};\r\n                for (var i = 0, poi; poi = rideData[i++];) {\r\n                    // only include POI data for rides\r\n                    if (this[s_rideTypes].indexOf(poi.type) >= 0) {\r\n                        // grab \"label\", which is the English title for each POI\r\n                        rideNames[poi.id] = poi.label;\r\n                    }\r\n                }\r\n\r\n                resolve(rideNames);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    GetAPIUrl(requestObject) {\r\n        if (this[s_authToken] === \"\") {\r\n            return Promise.reject(new Error(\"Unable to complete request without park auth_token. auth_token has been removed from the themeparks library under request by the theme park's technology operation representatives.\"));\r\n        }\r\n\r\n        return new Promise(function(resolve, reject) {\r\n            // make sure headers exist if they weren't set already\r\n            if (!requestObject.headers) requestObject.headers = [];\r\n            requestObject.headers.Authorization = \"Basic \" + this[s_authToken];\r\n\r\n            // make sure we get JSON back\r\n            requestObject.forceJSON = true;\r\n\r\n            // send network request\r\n            this.HTTP(requestObject).then(resolve, reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Get the park ID used by the SeaWorld/Cedar Fair API\r\n     * @type {String}\r\n     * */\r\n    get ParkID() {\r\n        return this[s_parkID];\r\n    }\r\n\r\n    /**\r\n     * Get this park's API Base URL\r\n     * @type {String}\r\n     * */\r\n    get APIBase() {\r\n        return this[s_apiBase];\r\n    }\r\n}\r\n\r\nmodule.exports = TE2Park;"]}