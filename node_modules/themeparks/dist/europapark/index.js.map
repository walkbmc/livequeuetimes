{"version":3,"sources":["../../lib/europapark/index.js"],"names":["Park","require","Moment","crypto","s_apiBase","Symbol","s_apiVersion","s_parkSecretToken","EuropaPark","options","name","latitude","longitude","useragent","timezone","api_base","api_version","secret_token","currentParkDate","utc","format","Log","hmac","createHmac","update","code","digest","toUpperCase","Cache","Wrap","Promise","resolve","reject","HTTP","url","then","ride_data","rideNames","i","poi","nameEnglish","nameGerman","bind","FetchRideData","data","GenerateAccessToken","waitTimes","length","rideIdx","ride","Rides","WaitTime","ridetime","rideObject","GetRideObject","id","waittime","time","active","status","openingTimes","sched","Schedule","SetRange","startDate","tz","from","Timezone","endDate","until","openingTime","start","closingTime","end","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\n// include core Park class\r\nvar Park = require(\"../park\");\r\nvar Moment = require(\"moment-timezone\");\r\n\r\n// crypto library for generating access tokens\r\nvar crypto = require(\"crypto\");\r\n\r\nvar s_apiBase = Symbol();\r\nvar s_apiVersion = Symbol();\r\nvar s_parkSecretToken = Symbol();\r\n\r\n/**\r\n * Implements the Europa Park API framework.\r\n * @class\r\n * @extends Park\r\n */\r\nclass EuropaPark extends Park {\r\n    /**\r\n     * Create new EuropaPark Object.\r\n     * @param {Object} [options]\r\n     * @param {String} [options.api_base] Optional base URL for API requests \r\n     * @param {String} [options.api_version] API Version to make requests to (default: 'api-5.2') \r\n     * @param {String} [options.secret_token] Secret token to use to generate the wait times API access token\r\n     */\r\n    constructor(options = {}) {\r\n        options.name = options.name || \"Europa Park\";\r\n\r\n        // Europa-Park coordinates\r\n        options.latitude = options.latitude || 48.268931;\r\n        options.longitude = options.longitude || 7.721559;\r\n\r\n        // Use the Android app's user-agent\r\n        options.useragent = options.useragent || \"okhttp/2.7.0\";\r\n\r\n        // park's timezone\r\n        options.timezone = \"Europe/Berlin\";\r\n\r\n        // inherit from base class\r\n        super(options);\r\n\r\n        // accept overriding the API base URL\r\n        this[s_apiBase] = options.api_base || \"https://api.europapark.de/\";\r\n        // accept overriding API version\r\n        this[s_apiVersion] = options.api_version || \"api-5.4\";\r\n        // take secret token from options, or default to known token\r\n        this[s_parkSecretToken] = options.secret_token || \"ZhQCqoZp\";\r\n    }\r\n\r\n    /**\r\n     * Generate an access token for accessing wait times\r\n     * @returns {String} Current Access Token\r\n     */\r\n    GenerateAccessToken() {\r\n        // generate wait times access code\r\n\r\n        // start with current park date in UTC (YYYYMMDDHH format)\r\n        var currentParkDate = Moment.utc().format(\"YYYYMMDDHH\");\r\n        this.Log(\"Calculated token date as\", currentParkDate);\r\n\r\n        // sha256 hash using key\r\n        var hmac = crypto.createHmac(\"sha256\", this[s_parkSecretToken]);\r\n        hmac.update(currentParkDate);\r\n        var code = hmac.digest(\"hex\").toUpperCase();\r\n\r\n        this.Log(\"Generated Europa wait times code\", code);\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * Fetches fresh or cached ride data from the park API\r\n     * @returns {Promise<Object>} Object of Ride ID => Ride Name in English (or German if no English name is available)\r\n     */\r\n    FetchRideData() {\r\n        return this.Cache.Wrap(\"ridedata\", function() {\r\n            return new Promise(function(resolve, reject) {\r\n                // grab ride names from the API\r\n                this.HTTP({\r\n                    url: this[s_apiBase] + this[s_apiVersion] + \"/pointsofinterest\",\r\n                }).then(function(ride_data) {\r\n                    // extract names from returned data\r\n                    var rideNames = {};\r\n                    for (var i = 0, poi; poi = ride_data[i++];) {\r\n                        // types:\r\n                        //  1: ride\r\n                        //  2: food\r\n                        //  3: park entrance\r\n                        //  5: shop\r\n                        //  6: show\r\n\r\n                        // not all attractions have English names, so fallback to German if missing\r\n                        rideNames[poi.code] = poi.nameEnglish || poi.nameGerman;\r\n                    }\r\n\r\n                    resolve(rideNames);\r\n                }.bind(this), reject);\r\n            }.bind(this));\r\n        }.bind(this), 60 * 60 * 24);\r\n    }\r\n\r\n    /**\r\n     * Fetch Wait times\r\n     */\r\n    FetchWaitTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            // fetch ride names before getting wait times (usually this will come from the cache)\r\n            this.FetchRideData().then(function(rideNames) {\r\n                this.HTTP({\r\n                    url: `${this[s_apiBase]}${this[s_apiVersion]}/waitingtimes`,\r\n                    data: {\r\n                        \"mock\": false,\r\n                        \"token\": this.GenerateAccessToken()\r\n                    }\r\n                }).then(function(waitTimes) {\r\n                    // if empty, park is just totally closed (!)\r\n                    if (!waitTimes.length) {\r\n                        // mark each ride as inactive\r\n                        // loop through previously known-about rides\r\n                        for (var rideIdx, ride; ride = this.Rides[rideIdx++];) {\r\n                            // set ride time to -1 to mark as closed\r\n                            ride.WaitTime = -1;\r\n                        }\r\n\r\n                        // TODO - loop over a hard-coded list of known rides at the park\r\n\r\n                        // resolve early\r\n                        return resolve();\r\n                    }\r\n\r\n                    for (var i = 0, ridetime; ridetime = waitTimes[i++];) {\r\n                        // FYI, ridetime.type:\r\n                        //   1: rollercoaster\r\n                        //   2: water\r\n                        //   3: adventure\r\n\r\n                        // status meanings:\r\n                        //  0: Open!\r\n                        //  1: Wait time is over 90 minutes\r\n                        //  2: Closed\r\n                        //  3: Broken Down\r\n                        //  4: Bad weather\r\n                        //  5: VIP/Special Tour\r\n                        //  other: Probably just crazy long wait times\r\n\r\n                        // get this ride's' object\r\n                        var rideObject = this.GetRideObject({\r\n                            id: ridetime.code,\r\n                            name: rideNames[ridetime.code] || \"???\",\r\n                        });\r\n\r\n                        // lowest wait time is 1 minute (according to app)\r\n                        var waittime = ridetime.time > 0 ? ridetime.time : 0;\r\n                        var active = (ridetime.status === 0 || ridetime.status === 1);\r\n                        // copy how the app reacts to >90 minute waits\r\n                        if (ridetime.status === 1) waittime = 91;\r\n\r\n                        // set new wait time\r\n                        rideObject.WaitTime = active ? waittime : -1;\r\n                    }\r\n\r\n                    resolve();\r\n                }.bind(this), reject);\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n\r\n    /** \r\n     * Fetch Europa Park opening time data\r\n     * @returns {Promise}\r\n     */\r\n    FetchOpeningTimes() {\r\n        return new Promise(function(resolve, reject) {\r\n            this.HTTP({\r\n                url: `${this[s_apiBase]}${this[s_apiVersion]}/openingtimes`\r\n            }).then(function(openingTimes) {\r\n                for (var i = 0, sched; sched = openingTimes[i++];) {\r\n                    // EuropaPark returns opening hours in blocks of ranges\r\n                    //  set each range of dates in our schedule object \r\n                    this.Schedule.SetRange({\r\n                        startDate: Moment.tz(sched.from, \"YYYY-MM-DD\", this.Timezone),\r\n                        endDate: Moment.tz(sched.until, \"YYYY-MM-DD\", this.Timezone),\r\n                        openingTime: Moment(sched.start, \"HH:mm\"),\r\n                        closingTime: Moment(sched.end, \"HH:mm\")\r\n                    });\r\n                }\r\n\r\n                // TODO - the park is actually closed on various days and has announced varients to these times\r\n                //  find out how to get these properly!\r\n\r\n                resolve();\r\n            }.bind(this), reject);\r\n        }.bind(this));\r\n    }\r\n}\r\n\r\n// export the class\r\nmodule.exports = EuropaPark;"]}